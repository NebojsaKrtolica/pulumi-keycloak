// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public static partial class Invokes
    {
        /// <summary>
        /// ## # keycloak..Realm data source
        /// 
        /// This data source can be used to fetch properties of a Keycloak realm for
        /// usage with other resources.
        /// 
        /// ### Argument Reference
        /// 
        /// The following arguments are supported:
        /// 
        /// - `realm` - (Required) The realm name.
        /// 
        /// ### Attributes Reference
        /// 
        /// See the docs for the `keycloak..Realm` resource for details on the exported attributes.
        /// 
        /// &gt; This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/d/realm.html.markdown.
        /// </summary>
        public static Task<GetRealmResult> GetRealm(GetRealmArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRealmResult>("keycloak:index/getRealm:getRealm", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetRealmArgs : Pulumi.ResourceArgs
    {
        [Input("internationalizations")]
        private InputList<Inputs.GetRealmInternationalizationsArgs>? _internationalizations;
        public InputList<Inputs.GetRealmInternationalizationsArgs> Internationalizations
        {
            get => _internationalizations ?? (_internationalizations = new InputList<Inputs.GetRealmInternationalizationsArgs>());
            set => _internationalizations = value;
        }

        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        [Input("securityDefenses")]
        private InputList<Inputs.GetRealmSecurityDefensesArgs>? _securityDefenses;
        public InputList<Inputs.GetRealmSecurityDefensesArgs> SecurityDefenses
        {
            get => _securityDefenses ?? (_securityDefenses = new InputList<Inputs.GetRealmSecurityDefensesArgs>());
            set => _securityDefenses = value;
        }

        [Input("smtpServers")]
        private InputList<Inputs.GetRealmSmtpServersArgs>? _smtpServers;
        public InputList<Inputs.GetRealmSmtpServersArgs> SmtpServers
        {
            get => _smtpServers ?? (_smtpServers = new InputList<Inputs.GetRealmSmtpServersArgs>());
            set => _smtpServers = value;
        }

        public GetRealmArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetRealmResult
    {
        public readonly string AccessCodeLifespan;
        public readonly string AccessCodeLifespanLogin;
        public readonly string AccessCodeLifespanUserAction;
        public readonly string AccessTokenLifespan;
        public readonly string AccessTokenLifespanForImplicitFlow;
        public readonly string AccountTheme;
        public readonly string ActionTokenGeneratedByAdminLifespan;
        public readonly string ActionTokenGeneratedByUserLifespan;
        public readonly string AdminTheme;
        public readonly string BrowserFlow;
        public readonly string ClientAuthenticationFlow;
        public readonly string DirectGrantFlow;
        public readonly string DisplayName;
        public readonly string DockerAuthenticationFlow;
        public readonly bool DuplicateEmailsAllowed;
        public readonly bool EditUsernameAllowed;
        public readonly string EmailTheme;
        public readonly bool Enabled;
        public readonly ImmutableArray<Outputs.GetRealmInternationalizationsResult> Internationalizations;
        public readonly string LoginTheme;
        public readonly bool LoginWithEmailAllowed;
        public readonly string OfflineSessionIdleTimeout;
        public readonly string OfflineSessionMaxLifespan;
        public readonly string PasswordPolicy;
        public readonly string Realm;
        public readonly int RefreshTokenMaxReuse;
        public readonly bool RegistrationAllowed;
        public readonly bool RegistrationEmailAsUsername;
        public readonly string RegistrationFlow;
        public readonly bool RememberMe;
        public readonly string ResetCredentialsFlow;
        public readonly bool ResetPasswordAllowed;
        public readonly ImmutableArray<Outputs.GetRealmSecurityDefensesResult> SecurityDefenses;
        public readonly ImmutableArray<Outputs.GetRealmSmtpServersResult> SmtpServers;
        public readonly string SsoSessionIdleTimeout;
        public readonly string SsoSessionMaxLifespan;
        public readonly bool VerifyEmail;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetRealmResult(
            string accessCodeLifespan,
            string accessCodeLifespanLogin,
            string accessCodeLifespanUserAction,
            string accessTokenLifespan,
            string accessTokenLifespanForImplicitFlow,
            string accountTheme,
            string actionTokenGeneratedByAdminLifespan,
            string actionTokenGeneratedByUserLifespan,
            string adminTheme,
            string browserFlow,
            string clientAuthenticationFlow,
            string directGrantFlow,
            string displayName,
            string dockerAuthenticationFlow,
            bool duplicateEmailsAllowed,
            bool editUsernameAllowed,
            string emailTheme,
            bool enabled,
            ImmutableArray<Outputs.GetRealmInternationalizationsResult> internationalizations,
            string loginTheme,
            bool loginWithEmailAllowed,
            string offlineSessionIdleTimeout,
            string offlineSessionMaxLifespan,
            string passwordPolicy,
            string realm,
            int refreshTokenMaxReuse,
            bool registrationAllowed,
            bool registrationEmailAsUsername,
            string registrationFlow,
            bool rememberMe,
            string resetCredentialsFlow,
            bool resetPasswordAllowed,
            ImmutableArray<Outputs.GetRealmSecurityDefensesResult> securityDefenses,
            ImmutableArray<Outputs.GetRealmSmtpServersResult> smtpServers,
            string ssoSessionIdleTimeout,
            string ssoSessionMaxLifespan,
            bool verifyEmail,
            string id)
        {
            AccessCodeLifespan = accessCodeLifespan;
            AccessCodeLifespanLogin = accessCodeLifespanLogin;
            AccessCodeLifespanUserAction = accessCodeLifespanUserAction;
            AccessTokenLifespan = accessTokenLifespan;
            AccessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
            AccountTheme = accountTheme;
            ActionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
            ActionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
            AdminTheme = adminTheme;
            BrowserFlow = browserFlow;
            ClientAuthenticationFlow = clientAuthenticationFlow;
            DirectGrantFlow = directGrantFlow;
            DisplayName = displayName;
            DockerAuthenticationFlow = dockerAuthenticationFlow;
            DuplicateEmailsAllowed = duplicateEmailsAllowed;
            EditUsernameAllowed = editUsernameAllowed;
            EmailTheme = emailTheme;
            Enabled = enabled;
            Internationalizations = internationalizations;
            LoginTheme = loginTheme;
            LoginWithEmailAllowed = loginWithEmailAllowed;
            OfflineSessionIdleTimeout = offlineSessionIdleTimeout;
            OfflineSessionMaxLifespan = offlineSessionMaxLifespan;
            PasswordPolicy = passwordPolicy;
            Realm = realm;
            RefreshTokenMaxReuse = refreshTokenMaxReuse;
            RegistrationAllowed = registrationAllowed;
            RegistrationEmailAsUsername = registrationEmailAsUsername;
            RegistrationFlow = registrationFlow;
            RememberMe = rememberMe;
            ResetCredentialsFlow = resetCredentialsFlow;
            ResetPasswordAllowed = resetPasswordAllowed;
            SecurityDefenses = securityDefenses;
            SmtpServers = smtpServers;
            SsoSessionIdleTimeout = ssoSessionIdleTimeout;
            SsoSessionMaxLifespan = ssoSessionMaxLifespan;
            VerifyEmail = verifyEmail;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetRealmInternationalizationsArgs : Pulumi.ResourceArgs
    {
        [Input("defaultLocale")]
        public Input<string>? DefaultLocale { get; set; }

        [Input("supportedLocales")]
        private InputList<string>? _supportedLocales;
        public InputList<string> SupportedLocales
        {
            get => _supportedLocales ?? (_supportedLocales = new InputList<string>());
            set => _supportedLocales = value;
        }

        public GetRealmInternationalizationsArgs()
        {
        }
    }

    public sealed class GetRealmSecurityDefensesArgs : Pulumi.ResourceArgs
    {
        [Input("headers")]
        private InputList<GetRealmSecurityDefensesHeadersArgs>? _headers;
        public InputList<GetRealmSecurityDefensesHeadersArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<GetRealmSecurityDefensesHeadersArgs>());
            set => _headers = value;
        }

        public GetRealmSecurityDefensesArgs()
        {
        }
    }

    public sealed class GetRealmSecurityDefensesHeadersArgs : Pulumi.ResourceArgs
    {
        [Input("contentSecurityPolicy")]
        public Input<string>? ContentSecurityPolicy { get; set; }

        [Input("contentSecurityPolicyReportOnly")]
        public Input<string>? ContentSecurityPolicyReportOnly { get; set; }

        [Input("strictTransportSecurity")]
        public Input<string>? StrictTransportSecurity { get; set; }

        [Input("xContentTypeOptions")]
        public Input<string>? XContentTypeOptions { get; set; }

        [Input("xFrameOptions")]
        public Input<string>? XFrameOptions { get; set; }

        [Input("xRobotsTag")]
        public Input<string>? XRobotsTag { get; set; }

        [Input("xXssProtection")]
        public Input<string>? XXssProtection { get; set; }

        public GetRealmSecurityDefensesHeadersArgs()
        {
        }
    }

    public sealed class GetRealmSmtpServersArgs : Pulumi.ResourceArgs
    {
        [Input("auths")]
        private InputList<GetRealmSmtpServersAuthsArgs>? _auths;
        public InputList<GetRealmSmtpServersAuthsArgs> Auths
        {
            get => _auths ?? (_auths = new InputList<GetRealmSmtpServersAuthsArgs>());
            set => _auths = value;
        }

        [Input("envelopeFrom")]
        public Input<string>? EnvelopeFrom { get; set; }

        [Input("from")]
        public Input<string>? From { get; set; }

        [Input("fromDisplayName")]
        public Input<string>? FromDisplayName { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("port")]
        public Input<string>? Port { get; set; }

        [Input("replyTo")]
        public Input<string>? ReplyTo { get; set; }

        [Input("replyToDisplayName")]
        public Input<string>? ReplyToDisplayName { get; set; }

        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        [Input("starttls")]
        public Input<bool>? Starttls { get; set; }

        public GetRealmSmtpServersArgs()
        {
        }
    }

    public sealed class GetRealmSmtpServersAuthsArgs : Pulumi.ResourceArgs
    {
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public GetRealmSmtpServersAuthsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetRealmInternationalizationsResult
    {
        public readonly string DefaultLocale;
        public readonly ImmutableArray<string> SupportedLocales;

        [OutputConstructor]
        private GetRealmInternationalizationsResult(
            string defaultLocale,
            ImmutableArray<string> supportedLocales)
        {
            DefaultLocale = defaultLocale;
            SupportedLocales = supportedLocales;
        }
    }

    [OutputType]
    public sealed class GetRealmSecurityDefensesHeadersResult
    {
        public readonly string ContentSecurityPolicy;
        public readonly string ContentSecurityPolicyReportOnly;
        public readonly string StrictTransportSecurity;
        public readonly string XContentTypeOptions;
        public readonly string XFrameOptions;
        public readonly string XRobotsTag;
        public readonly string XXssProtection;

        [OutputConstructor]
        private GetRealmSecurityDefensesHeadersResult(
            string contentSecurityPolicy,
            string contentSecurityPolicyReportOnly,
            string strictTransportSecurity,
            string xContentTypeOptions,
            string xFrameOptions,
            string xRobotsTag,
            string xXssProtection)
        {
            ContentSecurityPolicy = contentSecurityPolicy;
            ContentSecurityPolicyReportOnly = contentSecurityPolicyReportOnly;
            StrictTransportSecurity = strictTransportSecurity;
            XContentTypeOptions = xContentTypeOptions;
            XFrameOptions = xFrameOptions;
            XRobotsTag = xRobotsTag;
            XXssProtection = xXssProtection;
        }
    }

    [OutputType]
    public sealed class GetRealmSecurityDefensesResult
    {
        public readonly ImmutableArray<GetRealmSecurityDefensesHeadersResult> Headers;

        [OutputConstructor]
        private GetRealmSecurityDefensesResult(ImmutableArray<GetRealmSecurityDefensesHeadersResult> headers)
        {
            Headers = headers;
        }
    }

    [OutputType]
    public sealed class GetRealmSmtpServersAuthsResult
    {
        public readonly string Password;
        public readonly string Username;

        [OutputConstructor]
        private GetRealmSmtpServersAuthsResult(
            string password,
            string username)
        {
            Password = password;
            Username = username;
        }
    }

    [OutputType]
    public sealed class GetRealmSmtpServersResult
    {
        public readonly ImmutableArray<GetRealmSmtpServersAuthsResult> Auths;
        public readonly string EnvelopeFrom;
        public readonly string From;
        public readonly string FromDisplayName;
        public readonly string Host;
        public readonly string Port;
        public readonly string ReplyTo;
        public readonly string ReplyToDisplayName;
        public readonly bool Ssl;
        public readonly bool Starttls;

        [OutputConstructor]
        private GetRealmSmtpServersResult(
            ImmutableArray<GetRealmSmtpServersAuthsResult> auths,
            string envelopeFrom,
            string from,
            string fromDisplayName,
            string host,
            string port,
            string replyTo,
            string replyToDisplayName,
            bool ssl,
            bool starttls)
        {
            Auths = auths;
            EnvelopeFrom = envelopeFrom;
            From = from;
            FromDisplayName = fromDisplayName;
            Host = host;
            Port = port;
            ReplyTo = replyTo;
            ReplyToDisplayName = replyToDisplayName;
            Ssl = ssl;
            Starttls = starttls;
        }
    }
    }
}
