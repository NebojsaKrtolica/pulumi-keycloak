// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.OpenId
{
    public static partial class Invokes
    {
        public static Task<GetClientAuthorizationPolicyResult> GetClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClientAuthorizationPolicyResult>("keycloak:OpenId/getClientAuthorizationPolicy:getClientAuthorizationPolicy", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetClientAuthorizationPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        [Input("resourceServerId", required: true)]
        public Input<string> ResourceServerId { get; set; } = null!;

        public GetClientAuthorizationPolicyArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetClientAuthorizationPolicyResult
    {
        public readonly string DecisionStrategy;
        public readonly string Logic;
        public readonly string Name;
        public readonly string Owner;
        public readonly ImmutableArray<string> Policies;
        public readonly string RealmId;
        public readonly string ResourceServerId;
        public readonly ImmutableArray<string> Resources;
        public readonly ImmutableArray<string> Scopes;
        public readonly string Type;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetClientAuthorizationPolicyResult(
            string decisionStrategy,
            string logic,
            string name,
            string owner,
            ImmutableArray<string> policies,
            string realmId,
            string resourceServerId,
            ImmutableArray<string> resources,
            ImmutableArray<string> scopes,
            string type,
            string id)
        {
            DecisionStrategy = decisionStrategy;
            Logic = logic;
            Name = name;
            Owner = owner;
            Policies = policies;
            RealmId = realmId;
            ResourceServerId = resourceServerId;
            Resources = resources;
            Scopes = scopes;
            Type = type;
            Id = id;
        }
    }
}
