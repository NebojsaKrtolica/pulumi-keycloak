// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Saml
{
    public static class GetClient
    {
        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak client that uses the SAML protocol.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var realmManagement = Output.Create(Keycloak.Saml.GetClient.InvokeAsync(new Keycloak.Saml.GetClientArgs
        ///         {
        ///             RealmId = "my-realm",
        ///             ClientId = "realm-management",
        ///         }));
        ///         var admin = realmManagement.Apply(realmManagement =&gt; Output.Create(Keycloak.GetRole.InvokeAsync(new Keycloak.GetRoleArgs
        ///         {
        ///             RealmId = "my-realm",
        ///             ClientId = realmManagement.Id,
        ///             Name = "realm-admin",
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClientResult> InvokeAsync(GetClientArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClientResult>("keycloak:saml/getClient:getClient", args ?? new GetClientArgs(), options.WithVersion());
    }


    public sealed class GetClientArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client id (not its unique ID).
        /// </summary>
        [Input("clientId", required: true)]
        public string ClientId { get; set; } = null!;

        /// <summary>
        /// The realm id.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        public GetClientArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClientResult
    {
        public readonly string AssertionConsumerPostUrl;
        public readonly string AssertionConsumerRedirectUrl;
        public readonly ImmutableArray<Outputs.GetClientAuthenticationFlowBindingOverrideResult> AuthenticationFlowBindingOverrides;
        public readonly string BaseUrl;
        public readonly string ClientId;
        public readonly bool ClientSignatureRequired;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly bool EncryptAssertions;
        public readonly string EncryptionCertificate;
        public readonly bool ForceNameIdFormat;
        public readonly bool ForcePostBinding;
        public readonly bool FrontChannelLogout;
        public readonly bool FullScopeAllowed;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdpInitiatedSsoRelayState;
        public readonly string IdpInitiatedSsoUrlName;
        public readonly bool IncludeAuthnStatement;
        public readonly string LogoutServicePostBindingUrl;
        public readonly string LogoutServiceRedirectBindingUrl;
        public readonly string MasterSamlProcessingUrl;
        public readonly string Name;
        public readonly string NameIdFormat;
        public readonly string RealmId;
        public readonly string RootUrl;
        public readonly bool SignAssertions;
        public readonly bool SignDocuments;
        public readonly string SignatureAlgorithm;
        public readonly string SigningCertificate;
        public readonly string SigningPrivateKey;
        public readonly ImmutableArray<string> ValidRedirectUris;

        [OutputConstructor]
        private GetClientResult(
            string assertionConsumerPostUrl,

            string assertionConsumerRedirectUrl,

            ImmutableArray<Outputs.GetClientAuthenticationFlowBindingOverrideResult> authenticationFlowBindingOverrides,

            string baseUrl,

            string clientId,

            bool clientSignatureRequired,

            string description,

            bool enabled,

            bool encryptAssertions,

            string encryptionCertificate,

            bool forceNameIdFormat,

            bool forcePostBinding,

            bool frontChannelLogout,

            bool fullScopeAllowed,

            string id,

            string idpInitiatedSsoRelayState,

            string idpInitiatedSsoUrlName,

            bool includeAuthnStatement,

            string logoutServicePostBindingUrl,

            string logoutServiceRedirectBindingUrl,

            string masterSamlProcessingUrl,

            string name,

            string nameIdFormat,

            string realmId,

            string rootUrl,

            bool signAssertions,

            bool signDocuments,

            string signatureAlgorithm,

            string signingCertificate,

            string signingPrivateKey,

            ImmutableArray<string> validRedirectUris)
        {
            AssertionConsumerPostUrl = assertionConsumerPostUrl;
            AssertionConsumerRedirectUrl = assertionConsumerRedirectUrl;
            AuthenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            BaseUrl = baseUrl;
            ClientId = clientId;
            ClientSignatureRequired = clientSignatureRequired;
            Description = description;
            Enabled = enabled;
            EncryptAssertions = encryptAssertions;
            EncryptionCertificate = encryptionCertificate;
            ForceNameIdFormat = forceNameIdFormat;
            ForcePostBinding = forcePostBinding;
            FrontChannelLogout = frontChannelLogout;
            FullScopeAllowed = fullScopeAllowed;
            Id = id;
            IdpInitiatedSsoRelayState = idpInitiatedSsoRelayState;
            IdpInitiatedSsoUrlName = idpInitiatedSsoUrlName;
            IncludeAuthnStatement = includeAuthnStatement;
            LogoutServicePostBindingUrl = logoutServicePostBindingUrl;
            LogoutServiceRedirectBindingUrl = logoutServiceRedirectBindingUrl;
            MasterSamlProcessingUrl = masterSamlProcessingUrl;
            Name = name;
            NameIdFormat = nameIdFormat;
            RealmId = realmId;
            RootUrl = rootUrl;
            SignAssertions = signAssertions;
            SignDocuments = signDocuments;
            SignatureAlgorithm = signatureAlgorithm;
            SigningCertificate = signingCertificate;
            SigningPrivateKey = signingPrivateKey;
            ValidRedirectUris = validRedirectUris;
        }
    }
}
