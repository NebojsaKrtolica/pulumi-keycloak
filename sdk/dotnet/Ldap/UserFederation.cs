// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Ldap
{
    public partial class UserFederation : Pulumi.CustomResource
    {
        /// <summary>
        /// The number of users to sync within a single transaction.
        /// </summary>
        [Output("batchSizeForSync")]
        public Output<int?> BatchSizeForSync { get; private set; } = null!;

        /// <summary>
        /// Password of LDAP admin.
        /// </summary>
        [Output("bindCredential")]
        public Output<string?> BindCredential { get; private set; } = null!;

        /// <summary>
        /// DN of LDAP admin, which will be used by Keycloak to access LDAP server.
        /// </summary>
        [Output("bindDn")]
        public Output<string?> BindDn { get; private set; } = null!;

        [Output("cachePolicy")]
        public Output<string?> CachePolicy { get; private set; } = null!;

        /// <summary>
        /// How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic
        /// changed users sync.
        /// </summary>
        [Output("changedSyncPeriod")]
        public Output<int?> ChangedSyncPeriod { get; private set; } = null!;

        /// <summary>
        /// LDAP connection timeout (duration string)
        /// </summary>
        [Output("connectionTimeout")]
        public Output<string?> ConnectionTimeout { get; private set; } = null!;

        /// <summary>
        /// Connection URL to the LDAP server.
        /// </summary>
        [Output("connectionUrl")]
        public Output<string> ConnectionUrl { get; private set; } = null!;

        /// <summary>
        /// Additional LDAP filter for filtering searched users. Must begin with '(' and end with ')'.
        /// </summary>
        [Output("customUserSearchFilter")]
        public Output<string?> CustomUserSearchFilter { get; private set; } = null!;

        /// <summary>
        /// READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to
        /// LDAP.
        /// </summary>
        [Output("editMode")]
        public Output<string?> EditMode { get; private set; } = null!;

        /// <summary>
        /// When false, this provider will not be used when performing queries for users.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full
        /// sync.
        /// </summary>
        [Output("fullSyncPeriod")]
        public Output<int?> FullSyncPeriod { get; private set; } = null!;

        /// <summary>
        /// When true, LDAP users will be imported into the Keycloak database.
        /// </summary>
        [Output("importEnabled")]
        public Output<bool?> ImportEnabled { get; private set; } = null!;

        /// <summary>
        /// Display name of the provider when displayed in the console.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// When true, Keycloak assumes the LDAP server supports pagination.
        /// </summary>
        [Output("pagination")]
        public Output<bool?> Pagination { get; private set; } = null!;

        /// <summary>
        /// Priority of this provider when looking up users. Lower values are first.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Name of the LDAP attribute to use as the relative distinguished name.
        /// </summary>
        [Output("rdnLdapAttribute")]
        public Output<string> RdnLdapAttribute { get; private set; } = null!;

        /// <summary>
        /// LDAP read timeout (duration string)
        /// </summary>
        [Output("readTimeout")]
        public Output<string?> ReadTimeout { get; private set; } = null!;

        /// <summary>
        /// The realm this provider will provide user federation for.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        /// <summary>
        /// ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
        /// </summary>
        [Output("searchScope")]
        public Output<string?> SearchScope { get; private set; } = null!;

        /// <summary>
        /// When true, newly created users will be synced back to LDAP.
        /// </summary>
        [Output("syncRegistrations")]
        public Output<bool?> SyncRegistrations { get; private set; } = null!;

        [Output("useTruststoreSpi")]
        public Output<string?> UseTruststoreSpi { get; private set; } = null!;

        /// <summary>
        /// All values of LDAP objectClass attribute for users in LDAP.
        /// </summary>
        [Output("userObjectClasses")]
        public Output<ImmutableArray<string>> UserObjectClasses { get; private set; } = null!;

        /// <summary>
        /// Name of the LDAP attribute to use as the Keycloak username.
        /// </summary>
        [Output("usernameLdapAttribute")]
        public Output<string> UsernameLdapAttribute { get; private set; } = null!;

        /// <summary>
        /// Full DN of LDAP tree where your users are.
        /// </summary>
        [Output("usersDn")]
        public Output<string> UsersDn { get; private set; } = null!;

        /// <summary>
        /// Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
        /// </summary>
        [Output("uuidLdapAttribute")]
        public Output<string> UuidLdapAttribute { get; private set; } = null!;

        /// <summary>
        /// When true, Keycloak will validate passwords using the realm policy before updating it.
        /// </summary>
        [Output("validatePasswordPolicy")]
        public Output<bool?> ValidatePasswordPolicy { get; private set; } = null!;

        /// <summary>
        /// LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
        /// </summary>
        [Output("vendor")]
        public Output<string?> Vendor { get; private set; } = null!;


        /// <summary>
        /// Create a UserFederation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserFederation(string name, UserFederationArgs args, CustomResourceOptions? options = null)
            : base("keycloak:Ldap/userFederation:UserFederation", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private UserFederation(string name, Input<string> id, UserFederationState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:Ldap/userFederation:UserFederation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserFederation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserFederation Get(string name, Input<string> id, UserFederationState? state = null, CustomResourceOptions? options = null)
        {
            return new UserFederation(name, id, state, options);
        }
    }

    public sealed class UserFederationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of users to sync within a single transaction.
        /// </summary>
        [Input("batchSizeForSync")]
        public Input<int>? BatchSizeForSync { get; set; }

        /// <summary>
        /// Password of LDAP admin.
        /// </summary>
        [Input("bindCredential")]
        public Input<string>? BindCredential { get; set; }

        /// <summary>
        /// DN of LDAP admin, which will be used by Keycloak to access LDAP server.
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        [Input("cachePolicy")]
        public Input<string>? CachePolicy { get; set; }

        /// <summary>
        /// How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic
        /// changed users sync.
        /// </summary>
        [Input("changedSyncPeriod")]
        public Input<int>? ChangedSyncPeriod { get; set; }

        /// <summary>
        /// LDAP connection timeout (duration string)
        /// </summary>
        [Input("connectionTimeout")]
        public Input<string>? ConnectionTimeout { get; set; }

        /// <summary>
        /// Connection URL to the LDAP server.
        /// </summary>
        [Input("connectionUrl", required: true)]
        public Input<string> ConnectionUrl { get; set; } = null!;

        /// <summary>
        /// Additional LDAP filter for filtering searched users. Must begin with '(' and end with ')'.
        /// </summary>
        [Input("customUserSearchFilter")]
        public Input<string>? CustomUserSearchFilter { get; set; }

        /// <summary>
        /// READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to
        /// LDAP.
        /// </summary>
        [Input("editMode")]
        public Input<string>? EditMode { get; set; }

        /// <summary>
        /// When false, this provider will not be used when performing queries for users.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full
        /// sync.
        /// </summary>
        [Input("fullSyncPeriod")]
        public Input<int>? FullSyncPeriod { get; set; }

        /// <summary>
        /// When true, LDAP users will be imported into the Keycloak database.
        /// </summary>
        [Input("importEnabled")]
        public Input<bool>? ImportEnabled { get; set; }

        /// <summary>
        /// Display name of the provider when displayed in the console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// When true, Keycloak assumes the LDAP server supports pagination.
        /// </summary>
        [Input("pagination")]
        public Input<bool>? Pagination { get; set; }

        /// <summary>
        /// Priority of this provider when looking up users. Lower values are first.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Name of the LDAP attribute to use as the relative distinguished name.
        /// </summary>
        [Input("rdnLdapAttribute", required: true)]
        public Input<string> RdnLdapAttribute { get; set; } = null!;

        /// <summary>
        /// LDAP read timeout (duration string)
        /// </summary>
        [Input("readTimeout")]
        public Input<string>? ReadTimeout { get; set; }

        /// <summary>
        /// The realm this provider will provide user federation for.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        /// <summary>
        /// ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
        /// </summary>
        [Input("searchScope")]
        public Input<string>? SearchScope { get; set; }

        /// <summary>
        /// When true, newly created users will be synced back to LDAP.
        /// </summary>
        [Input("syncRegistrations")]
        public Input<bool>? SyncRegistrations { get; set; }

        [Input("useTruststoreSpi")]
        public Input<string>? UseTruststoreSpi { get; set; }

        [Input("userObjectClasses", required: true)]
        private InputList<string>? _userObjectClasses;

        /// <summary>
        /// All values of LDAP objectClass attribute for users in LDAP.
        /// </summary>
        public InputList<string> UserObjectClasses
        {
            get => _userObjectClasses ?? (_userObjectClasses = new InputList<string>());
            set => _userObjectClasses = value;
        }

        /// <summary>
        /// Name of the LDAP attribute to use as the Keycloak username.
        /// </summary>
        [Input("usernameLdapAttribute", required: true)]
        public Input<string> UsernameLdapAttribute { get; set; } = null!;

        /// <summary>
        /// Full DN of LDAP tree where your users are.
        /// </summary>
        [Input("usersDn", required: true)]
        public Input<string> UsersDn { get; set; } = null!;

        /// <summary>
        /// Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
        /// </summary>
        [Input("uuidLdapAttribute", required: true)]
        public Input<string> UuidLdapAttribute { get; set; } = null!;

        /// <summary>
        /// When true, Keycloak will validate passwords using the realm policy before updating it.
        /// </summary>
        [Input("validatePasswordPolicy")]
        public Input<bool>? ValidatePasswordPolicy { get; set; }

        /// <summary>
        /// LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public UserFederationArgs()
        {
        }
    }

    public sealed class UserFederationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of users to sync within a single transaction.
        /// </summary>
        [Input("batchSizeForSync")]
        public Input<int>? BatchSizeForSync { get; set; }

        /// <summary>
        /// Password of LDAP admin.
        /// </summary>
        [Input("bindCredential")]
        public Input<string>? BindCredential { get; set; }

        /// <summary>
        /// DN of LDAP admin, which will be used by Keycloak to access LDAP server.
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        [Input("cachePolicy")]
        public Input<string>? CachePolicy { get; set; }

        /// <summary>
        /// How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic
        /// changed users sync.
        /// </summary>
        [Input("changedSyncPeriod")]
        public Input<int>? ChangedSyncPeriod { get; set; }

        /// <summary>
        /// LDAP connection timeout (duration string)
        /// </summary>
        [Input("connectionTimeout")]
        public Input<string>? ConnectionTimeout { get; set; }

        /// <summary>
        /// Connection URL to the LDAP server.
        /// </summary>
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        /// <summary>
        /// Additional LDAP filter for filtering searched users. Must begin with '(' and end with ')'.
        /// </summary>
        [Input("customUserSearchFilter")]
        public Input<string>? CustomUserSearchFilter { get; set; }

        /// <summary>
        /// READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to
        /// LDAP.
        /// </summary>
        [Input("editMode")]
        public Input<string>? EditMode { get; set; }

        /// <summary>
        /// When false, this provider will not be used when performing queries for users.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full
        /// sync.
        /// </summary>
        [Input("fullSyncPeriod")]
        public Input<int>? FullSyncPeriod { get; set; }

        /// <summary>
        /// When true, LDAP users will be imported into the Keycloak database.
        /// </summary>
        [Input("importEnabled")]
        public Input<bool>? ImportEnabled { get; set; }

        /// <summary>
        /// Display name of the provider when displayed in the console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// When true, Keycloak assumes the LDAP server supports pagination.
        /// </summary>
        [Input("pagination")]
        public Input<bool>? Pagination { get; set; }

        /// <summary>
        /// Priority of this provider when looking up users. Lower values are first.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Name of the LDAP attribute to use as the relative distinguished name.
        /// </summary>
        [Input("rdnLdapAttribute")]
        public Input<string>? RdnLdapAttribute { get; set; }

        /// <summary>
        /// LDAP read timeout (duration string)
        /// </summary>
        [Input("readTimeout")]
        public Input<string>? ReadTimeout { get; set; }

        /// <summary>
        /// The realm this provider will provide user federation for.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        /// <summary>
        /// ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
        /// </summary>
        [Input("searchScope")]
        public Input<string>? SearchScope { get; set; }

        /// <summary>
        /// When true, newly created users will be synced back to LDAP.
        /// </summary>
        [Input("syncRegistrations")]
        public Input<bool>? SyncRegistrations { get; set; }

        [Input("useTruststoreSpi")]
        public Input<string>? UseTruststoreSpi { get; set; }

        [Input("userObjectClasses")]
        private InputList<string>? _userObjectClasses;

        /// <summary>
        /// All values of LDAP objectClass attribute for users in LDAP.
        /// </summary>
        public InputList<string> UserObjectClasses
        {
            get => _userObjectClasses ?? (_userObjectClasses = new InputList<string>());
            set => _userObjectClasses = value;
        }

        /// <summary>
        /// Name of the LDAP attribute to use as the Keycloak username.
        /// </summary>
        [Input("usernameLdapAttribute")]
        public Input<string>? UsernameLdapAttribute { get; set; }

        /// <summary>
        /// Full DN of LDAP tree where your users are.
        /// </summary>
        [Input("usersDn")]
        public Input<string>? UsersDn { get; set; }

        /// <summary>
        /// Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
        /// </summary>
        [Input("uuidLdapAttribute")]
        public Input<string>? UuidLdapAttribute { get; set; }

        /// <summary>
        /// When true, Keycloak will validate passwords using the realm policy before updating it.
        /// </summary>
        [Input("validatePasswordPolicy")]
        public Input<bool>? ValidatePasswordPolicy { get; set; }

        /// <summary>
        /// LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public UserFederationState()
        {
        }
    }
}
