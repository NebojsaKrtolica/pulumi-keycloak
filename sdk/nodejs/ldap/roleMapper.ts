// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RoleMapper extends pulumi.CustomResource {
    /**
     * Get an existing RoleMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleMapperState, opts?: pulumi.CustomResourceOptions): RoleMapper {
        return new RoleMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:ldap/roleMapper:RoleMapper';

    /**
     * Returns true if the given object is an instance of RoleMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleMapper.__pulumiType;
    }

    public readonly clientId!: pulumi.Output<string | undefined>;
    public readonly ldapRolesDn!: pulumi.Output<string>;
    /**
     * The ldap user federation provider to attach this mapper to.
     */
    public readonly ldapUserFederationId!: pulumi.Output<string>;
    public readonly memberofLdapAttribute!: pulumi.Output<string | undefined>;
    public readonly membershipAttributeType!: pulumi.Output<string | undefined>;
    public readonly membershipLdapAttribute!: pulumi.Output<string>;
    public readonly membershipUserLdapAttribute!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Display name of the mapper when displayed in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The realm in which the ldap user federation provider exists.
     */
    public readonly realmId!: pulumi.Output<string>;
    public readonly roleNameLdapAttribute!: pulumi.Output<string>;
    public readonly roleObjectClasses!: pulumi.Output<string[]>;
    public readonly rolesLdapFilter!: pulumi.Output<string | undefined>;
    public readonly useRealmRolesMapping!: pulumi.Output<boolean | undefined>;
    public readonly userRolesRetrieveStrategy!: pulumi.Output<string | undefined>;

    /**
     * Create a RoleMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleMapperArgs | RoleMapperState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RoleMapperState | undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["ldapRolesDn"] = state ? state.ldapRolesDn : undefined;
            inputs["ldapUserFederationId"] = state ? state.ldapUserFederationId : undefined;
            inputs["memberofLdapAttribute"] = state ? state.memberofLdapAttribute : undefined;
            inputs["membershipAttributeType"] = state ? state.membershipAttributeType : undefined;
            inputs["membershipLdapAttribute"] = state ? state.membershipLdapAttribute : undefined;
            inputs["membershipUserLdapAttribute"] = state ? state.membershipUserLdapAttribute : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
            inputs["roleNameLdapAttribute"] = state ? state.roleNameLdapAttribute : undefined;
            inputs["roleObjectClasses"] = state ? state.roleObjectClasses : undefined;
            inputs["rolesLdapFilter"] = state ? state.rolesLdapFilter : undefined;
            inputs["useRealmRolesMapping"] = state ? state.useRealmRolesMapping : undefined;
            inputs["userRolesRetrieveStrategy"] = state ? state.userRolesRetrieveStrategy : undefined;
        } else {
            const args = argsOrState as RoleMapperArgs | undefined;
            if ((!args || args.ldapRolesDn === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'ldapRolesDn'");
            }
            if ((!args || args.ldapUserFederationId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'ldapUserFederationId'");
            }
            if ((!args || args.membershipLdapAttribute === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'membershipLdapAttribute'");
            }
            if ((!args || args.membershipUserLdapAttribute === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'membershipUserLdapAttribute'");
            }
            if ((!args || args.realmId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'realmId'");
            }
            if ((!args || args.roleNameLdapAttribute === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'roleNameLdapAttribute'");
            }
            if ((!args || args.roleObjectClasses === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'roleObjectClasses'");
            }
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["ldapRolesDn"] = args ? args.ldapRolesDn : undefined;
            inputs["ldapUserFederationId"] = args ? args.ldapUserFederationId : undefined;
            inputs["memberofLdapAttribute"] = args ? args.memberofLdapAttribute : undefined;
            inputs["membershipAttributeType"] = args ? args.membershipAttributeType : undefined;
            inputs["membershipLdapAttribute"] = args ? args.membershipLdapAttribute : undefined;
            inputs["membershipUserLdapAttribute"] = args ? args.membershipUserLdapAttribute : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
            inputs["roleNameLdapAttribute"] = args ? args.roleNameLdapAttribute : undefined;
            inputs["roleObjectClasses"] = args ? args.roleObjectClasses : undefined;
            inputs["rolesLdapFilter"] = args ? args.rolesLdapFilter : undefined;
            inputs["useRealmRolesMapping"] = args ? args.useRealmRolesMapping : undefined;
            inputs["userRolesRetrieveStrategy"] = args ? args.userRolesRetrieveStrategy : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RoleMapper.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleMapper resources.
 */
export interface RoleMapperState {
    readonly clientId?: pulumi.Input<string>;
    readonly ldapRolesDn?: pulumi.Input<string>;
    /**
     * The ldap user federation provider to attach this mapper to.
     */
    readonly ldapUserFederationId?: pulumi.Input<string>;
    readonly memberofLdapAttribute?: pulumi.Input<string>;
    readonly membershipAttributeType?: pulumi.Input<string>;
    readonly membershipLdapAttribute?: pulumi.Input<string>;
    readonly membershipUserLdapAttribute?: pulumi.Input<string>;
    readonly mode?: pulumi.Input<string>;
    /**
     * Display name of the mapper when displayed in the console.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The realm in which the ldap user federation provider exists.
     */
    readonly realmId?: pulumi.Input<string>;
    readonly roleNameLdapAttribute?: pulumi.Input<string>;
    readonly roleObjectClasses?: pulumi.Input<pulumi.Input<string>[]>;
    readonly rolesLdapFilter?: pulumi.Input<string>;
    readonly useRealmRolesMapping?: pulumi.Input<boolean>;
    readonly userRolesRetrieveStrategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleMapper resource.
 */
export interface RoleMapperArgs {
    readonly clientId?: pulumi.Input<string>;
    readonly ldapRolesDn: pulumi.Input<string>;
    /**
     * The ldap user federation provider to attach this mapper to.
     */
    readonly ldapUserFederationId: pulumi.Input<string>;
    readonly memberofLdapAttribute?: pulumi.Input<string>;
    readonly membershipAttributeType?: pulumi.Input<string>;
    readonly membershipLdapAttribute: pulumi.Input<string>;
    readonly membershipUserLdapAttribute: pulumi.Input<string>;
    readonly mode?: pulumi.Input<string>;
    /**
     * Display name of the mapper when displayed in the console.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The realm in which the ldap user federation provider exists.
     */
    readonly realmId: pulumi.Input<string>;
    readonly roleNameLdapAttribute: pulumi.Input<string>;
    readonly roleObjectClasses: pulumi.Input<pulumi.Input<string>[]>;
    readonly rolesLdapFilter?: pulumi.Input<string>;
    readonly useRealmRolesMapping?: pulumi.Input<boolean>;
    readonly userRolesRetrieveStrategy?: pulumi.Input<string>;
}
