// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Client extends pulumi.CustomResource {
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientState, opts?: pulumi.CustomResourceOptions): Client {
        return new Client(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:Saml/client:Client';

    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Client {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }

    public readonly assertionConsumerPostUrl!: pulumi.Output<string | undefined>;
    public readonly assertionConsumerRedirectUrl!: pulumi.Output<string | undefined>;
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSignatureRequired!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly forcePostBinding!: pulumi.Output<boolean>;
    public readonly frontChannelLogout!: pulumi.Output<boolean>;
    public readonly fullScopeAllowed!: pulumi.Output<boolean | undefined>;
    public readonly idpInitiatedSsoRelayState!: pulumi.Output<string | undefined>;
    public readonly idpInitiatedSsoUrlName!: pulumi.Output<string | undefined>;
    public readonly includeAuthnStatement!: pulumi.Output<boolean>;
    public readonly logoutServicePostBindingUrl!: pulumi.Output<string | undefined>;
    public readonly logoutServiceRedirectBindingUrl!: pulumi.Output<string | undefined>;
    public readonly masterSamlProcessingUrl!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameIdFormat!: pulumi.Output<string>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly rootUrl!: pulumi.Output<string | undefined>;
    public readonly signAssertions!: pulumi.Output<boolean>;
    public readonly signDocuments!: pulumi.Output<boolean>;
    public readonly signingCertificate!: pulumi.Output<string | undefined>;
    public readonly signingPrivateKey!: pulumi.Output<string | undefined>;
    public readonly validRedirectUris!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Client resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientArgs | ClientState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClientState | undefined;
            inputs["assertionConsumerPostUrl"] = state ? state.assertionConsumerPostUrl : undefined;
            inputs["assertionConsumerRedirectUrl"] = state ? state.assertionConsumerRedirectUrl : undefined;
            inputs["baseUrl"] = state ? state.baseUrl : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["clientSignatureRequired"] = state ? state.clientSignatureRequired : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["forcePostBinding"] = state ? state.forcePostBinding : undefined;
            inputs["frontChannelLogout"] = state ? state.frontChannelLogout : undefined;
            inputs["fullScopeAllowed"] = state ? state.fullScopeAllowed : undefined;
            inputs["idpInitiatedSsoRelayState"] = state ? state.idpInitiatedSsoRelayState : undefined;
            inputs["idpInitiatedSsoUrlName"] = state ? state.idpInitiatedSsoUrlName : undefined;
            inputs["includeAuthnStatement"] = state ? state.includeAuthnStatement : undefined;
            inputs["logoutServicePostBindingUrl"] = state ? state.logoutServicePostBindingUrl : undefined;
            inputs["logoutServiceRedirectBindingUrl"] = state ? state.logoutServiceRedirectBindingUrl : undefined;
            inputs["masterSamlProcessingUrl"] = state ? state.masterSamlProcessingUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameIdFormat"] = state ? state.nameIdFormat : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
            inputs["rootUrl"] = state ? state.rootUrl : undefined;
            inputs["signAssertions"] = state ? state.signAssertions : undefined;
            inputs["signDocuments"] = state ? state.signDocuments : undefined;
            inputs["signingCertificate"] = state ? state.signingCertificate : undefined;
            inputs["signingPrivateKey"] = state ? state.signingPrivateKey : undefined;
            inputs["validRedirectUris"] = state ? state.validRedirectUris : undefined;
        } else {
            const args = argsOrState as ClientArgs | undefined;
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["assertionConsumerPostUrl"] = args ? args.assertionConsumerPostUrl : undefined;
            inputs["assertionConsumerRedirectUrl"] = args ? args.assertionConsumerRedirectUrl : undefined;
            inputs["baseUrl"] = args ? args.baseUrl : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSignatureRequired"] = args ? args.clientSignatureRequired : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["forcePostBinding"] = args ? args.forcePostBinding : undefined;
            inputs["frontChannelLogout"] = args ? args.frontChannelLogout : undefined;
            inputs["fullScopeAllowed"] = args ? args.fullScopeAllowed : undefined;
            inputs["idpInitiatedSsoRelayState"] = args ? args.idpInitiatedSsoRelayState : undefined;
            inputs["idpInitiatedSsoUrlName"] = args ? args.idpInitiatedSsoUrlName : undefined;
            inputs["includeAuthnStatement"] = args ? args.includeAuthnStatement : undefined;
            inputs["logoutServicePostBindingUrl"] = args ? args.logoutServicePostBindingUrl : undefined;
            inputs["logoutServiceRedirectBindingUrl"] = args ? args.logoutServiceRedirectBindingUrl : undefined;
            inputs["masterSamlProcessingUrl"] = args ? args.masterSamlProcessingUrl : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameIdFormat"] = args ? args.nameIdFormat : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
            inputs["rootUrl"] = args ? args.rootUrl : undefined;
            inputs["signAssertions"] = args ? args.signAssertions : undefined;
            inputs["signDocuments"] = args ? args.signDocuments : undefined;
            inputs["signingCertificate"] = args ? args.signingCertificate : undefined;
            inputs["signingPrivateKey"] = args ? args.signingPrivateKey : undefined;
            inputs["validRedirectUris"] = args ? args.validRedirectUris : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Client.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Client resources.
 */
export interface ClientState {
    readonly assertionConsumerPostUrl?: pulumi.Input<string>;
    readonly assertionConsumerRedirectUrl?: pulumi.Input<string>;
    readonly baseUrl?: pulumi.Input<string>;
    readonly clientId?: pulumi.Input<string>;
    readonly clientSignatureRequired?: pulumi.Input<boolean>;
    readonly description?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly forcePostBinding?: pulumi.Input<boolean>;
    readonly frontChannelLogout?: pulumi.Input<boolean>;
    readonly fullScopeAllowed?: pulumi.Input<boolean>;
    readonly idpInitiatedSsoRelayState?: pulumi.Input<string>;
    readonly idpInitiatedSsoUrlName?: pulumi.Input<string>;
    readonly includeAuthnStatement?: pulumi.Input<boolean>;
    readonly logoutServicePostBindingUrl?: pulumi.Input<string>;
    readonly logoutServiceRedirectBindingUrl?: pulumi.Input<string>;
    readonly masterSamlProcessingUrl?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly nameIdFormat?: pulumi.Input<string>;
    readonly realmId?: pulumi.Input<string>;
    readonly rootUrl?: pulumi.Input<string>;
    readonly signAssertions?: pulumi.Input<boolean>;
    readonly signDocuments?: pulumi.Input<boolean>;
    readonly signingCertificate?: pulumi.Input<string>;
    readonly signingPrivateKey?: pulumi.Input<string>;
    readonly validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Client resource.
 */
export interface ClientArgs {
    readonly assertionConsumerPostUrl?: pulumi.Input<string>;
    readonly assertionConsumerRedirectUrl?: pulumi.Input<string>;
    readonly baseUrl?: pulumi.Input<string>;
    readonly clientId: pulumi.Input<string>;
    readonly clientSignatureRequired?: pulumi.Input<boolean>;
    readonly description?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly forcePostBinding?: pulumi.Input<boolean>;
    readonly frontChannelLogout?: pulumi.Input<boolean>;
    readonly fullScopeAllowed?: pulumi.Input<boolean>;
    readonly idpInitiatedSsoRelayState?: pulumi.Input<string>;
    readonly idpInitiatedSsoUrlName?: pulumi.Input<string>;
    readonly includeAuthnStatement?: pulumi.Input<boolean>;
    readonly logoutServicePostBindingUrl?: pulumi.Input<string>;
    readonly logoutServiceRedirectBindingUrl?: pulumi.Input<string>;
    readonly masterSamlProcessingUrl?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly nameIdFormat?: pulumi.Input<string>;
    readonly realmId: pulumi.Input<string>;
    readonly rootUrl?: pulumi.Input<string>;
    readonly signAssertions?: pulumi.Input<boolean>;
    readonly signDocuments?: pulumi.Input<boolean>;
    readonly signingCertificate?: pulumi.Input<string>;
    readonly signingPrivateKey?: pulumi.Input<string>;
    readonly validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}
