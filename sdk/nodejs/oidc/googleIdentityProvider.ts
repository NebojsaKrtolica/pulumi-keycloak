// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class GoogleIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing GoogleIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoogleIdentityProviderState, opts?: pulumi.CustomResourceOptions): GoogleIdentityProvider {
        return new GoogleIdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:oidc/googleIdentityProvider:GoogleIdentityProvider';

    /**
     * Returns true if the given object is an instance of GoogleIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoogleIdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoogleIdentityProvider.__pulumiType;
    }

    /**
     * This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
     * case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
     * returned to client, but the request with prompt=none will be forwarded to this identity provider.
     */
    public readonly acceptsPromptNoneForwardFromClient!: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     */
    public readonly addReadTokenRoleOnCreate!: pulumi.Output<boolean | undefined>;
    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this
     * is computed and always google
     */
    public /*out*/ readonly alias!: pulumi.Output<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    public readonly authenticateByDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Client ID.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * Client Secret.
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
     * value'. Default: 'openid profile email'
     */
    public readonly defaultScopes!: pulumi.Output<string | undefined>;
    /**
     * Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
     */
    public readonly disableUserInfo!: pulumi.Output<boolean | undefined>;
    /**
     * Not used by this provider, Will be implicitly Google
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * Enable/disable this identity provider.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly extraConfig!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     */
    public readonly firstBrokerLoginFlowAlias!: pulumi.Output<string | undefined>;
    /**
     * Hide On Login Page.
     */
    public readonly hideOnLoginPage!: pulumi.Output<boolean | undefined>;
    /**
     * Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
     * that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
     */
    public readonly hostedDomain!: pulumi.Output<string | undefined>;
    /**
     * Internal Identity Provider Id
     */
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    /**
     * If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
     * want to allow login from the provider, but want to integrate with a provider
     */
    public readonly linkOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     */
    public readonly postBrokerLoginFlowAlias!: pulumi.Output<string | undefined>;
    /**
     * provider id, is always google, unless you have a extended custom implementation
     */
    public readonly providerId!: pulumi.Output<string | undefined>;
    /**
     * Realm Name
     */
    public readonly realm!: pulumi.Output<string>;
    /**
     * Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
     * back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
     * the browser.
     */
    public readonly requestRefreshToken!: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable if tokens must be stored after authenticating users.
     */
    public readonly storeToken!: pulumi.Output<boolean | undefined>;
    /**
     * If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     */
    public readonly trustEmail!: pulumi.Output<boolean | undefined>;
    /**
     * Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
     * Google is throttling access to the User Info service.
     */
    public readonly useUserIpParam!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GoogleIdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoogleIdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoogleIdentityProviderArgs | GoogleIdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GoogleIdentityProviderState | undefined;
            inputs["acceptsPromptNoneForwardFromClient"] = state ? state.acceptsPromptNoneForwardFromClient : undefined;
            inputs["addReadTokenRoleOnCreate"] = state ? state.addReadTokenRoleOnCreate : undefined;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["authenticateByDefault"] = state ? state.authenticateByDefault : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["clientSecret"] = state ? state.clientSecret : undefined;
            inputs["defaultScopes"] = state ? state.defaultScopes : undefined;
            inputs["disableUserInfo"] = state ? state.disableUserInfo : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["extraConfig"] = state ? state.extraConfig : undefined;
            inputs["firstBrokerLoginFlowAlias"] = state ? state.firstBrokerLoginFlowAlias : undefined;
            inputs["hideOnLoginPage"] = state ? state.hideOnLoginPage : undefined;
            inputs["hostedDomain"] = state ? state.hostedDomain : undefined;
            inputs["internalId"] = state ? state.internalId : undefined;
            inputs["linkOnly"] = state ? state.linkOnly : undefined;
            inputs["postBrokerLoginFlowAlias"] = state ? state.postBrokerLoginFlowAlias : undefined;
            inputs["providerId"] = state ? state.providerId : undefined;
            inputs["realm"] = state ? state.realm : undefined;
            inputs["requestRefreshToken"] = state ? state.requestRefreshToken : undefined;
            inputs["storeToken"] = state ? state.storeToken : undefined;
            inputs["trustEmail"] = state ? state.trustEmail : undefined;
            inputs["useUserIpParam"] = state ? state.useUserIpParam : undefined;
        } else {
            const args = argsOrState as GoogleIdentityProviderArgs | undefined;
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.clientSecret === undefined) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if (!args || args.realm === undefined) {
                throw new Error("Missing required property 'realm'");
            }
            inputs["acceptsPromptNoneForwardFromClient"] = args ? args.acceptsPromptNoneForwardFromClient : undefined;
            inputs["addReadTokenRoleOnCreate"] = args ? args.addReadTokenRoleOnCreate : undefined;
            inputs["authenticateByDefault"] = args ? args.authenticateByDefault : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["defaultScopes"] = args ? args.defaultScopes : undefined;
            inputs["disableUserInfo"] = args ? args.disableUserInfo : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["extraConfig"] = args ? args.extraConfig : undefined;
            inputs["firstBrokerLoginFlowAlias"] = args ? args.firstBrokerLoginFlowAlias : undefined;
            inputs["hideOnLoginPage"] = args ? args.hideOnLoginPage : undefined;
            inputs["hostedDomain"] = args ? args.hostedDomain : undefined;
            inputs["linkOnly"] = args ? args.linkOnly : undefined;
            inputs["postBrokerLoginFlowAlias"] = args ? args.postBrokerLoginFlowAlias : undefined;
            inputs["providerId"] = args ? args.providerId : undefined;
            inputs["realm"] = args ? args.realm : undefined;
            inputs["requestRefreshToken"] = args ? args.requestRefreshToken : undefined;
            inputs["storeToken"] = args ? args.storeToken : undefined;
            inputs["trustEmail"] = args ? args.trustEmail : undefined;
            inputs["useUserIpParam"] = args ? args.useUserIpParam : undefined;
            inputs["alias"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["internalId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(GoogleIdentityProvider.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GoogleIdentityProvider resources.
 */
export interface GoogleIdentityProviderState {
    /**
     * This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
     * case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
     * returned to client, but the request with prompt=none will be forwarded to this identity provider.
     */
    readonly acceptsPromptNoneForwardFromClient?: pulumi.Input<boolean>;
    /**
     * Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     */
    readonly addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this
     * is computed and always google
     */
    readonly alias?: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    readonly authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * Client ID.
     */
    readonly clientId?: pulumi.Input<string>;
    /**
     * Client Secret.
     */
    readonly clientSecret?: pulumi.Input<string>;
    /**
     * The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
     * value'. Default: 'openid profile email'
     */
    readonly defaultScopes?: pulumi.Input<string>;
    /**
     * Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
     */
    readonly disableUserInfo?: pulumi.Input<boolean>;
    /**
     * Not used by this provider, Will be implicitly Google
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Enable/disable this identity provider.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly extraConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     */
    readonly firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Hide On Login Page.
     */
    readonly hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
     * that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
     */
    readonly hostedDomain?: pulumi.Input<string>;
    /**
     * Internal Identity Provider Id
     */
    readonly internalId?: pulumi.Input<string>;
    /**
     * If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
     * want to allow login from the provider, but want to integrate with a provider
     */
    readonly linkOnly?: pulumi.Input<boolean>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     */
    readonly postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * provider id, is always google, unless you have a extended custom implementation
     */
    readonly providerId?: pulumi.Input<string>;
    /**
     * Realm Name
     */
    readonly realm?: pulumi.Input<string>;
    /**
     * Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
     * back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
     * the browser.
     */
    readonly requestRefreshToken?: pulumi.Input<boolean>;
    /**
     * Enable/disable if tokens must be stored after authenticating users.
     */
    readonly storeToken?: pulumi.Input<boolean>;
    /**
     * If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     */
    readonly trustEmail?: pulumi.Input<boolean>;
    /**
     * Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
     * Google is throttling access to the User Info service.
     */
    readonly useUserIpParam?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GoogleIdentityProvider resource.
 */
export interface GoogleIdentityProviderArgs {
    /**
     * This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
     * case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
     * returned to client, but the request with prompt=none will be forwarded to this identity provider.
     */
    readonly acceptsPromptNoneForwardFromClient?: pulumi.Input<boolean>;
    /**
     * Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     */
    readonly addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * Enable/disable authenticate users by default.
     */
    readonly authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * Client ID.
     */
    readonly clientId: pulumi.Input<string>;
    /**
     * Client Secret.
     */
    readonly clientSecret: pulumi.Input<string>;
    /**
     * The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
     * value'. Default: 'openid profile email'
     */
    readonly defaultScopes?: pulumi.Input<string>;
    /**
     * Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
     */
    readonly disableUserInfo?: pulumi.Input<boolean>;
    /**
     * Enable/disable this identity provider.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly extraConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     */
    readonly firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Hide On Login Page.
     */
    readonly hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
     * that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
     */
    readonly hostedDomain?: pulumi.Input<string>;
    /**
     * If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
     * want to allow login from the provider, but want to integrate with a provider
     */
    readonly linkOnly?: pulumi.Input<boolean>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     */
    readonly postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * provider id, is always google, unless you have a extended custom implementation
     */
    readonly providerId?: pulumi.Input<string>;
    /**
     * Realm Name
     */
    readonly realm: pulumi.Input<string>;
    /**
     * Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
     * back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
     * the browser.
     */
    readonly requestRefreshToken?: pulumi.Input<boolean>;
    /**
     * Enable/disable if tokens must be stored after authenticating users.
     */
    readonly storeToken?: pulumi.Input<boolean>;
    /**
     * If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     */
    readonly trustEmail?: pulumi.Input<boolean>;
    /**
     * Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
     * Google is throttling access to the User Info service.
     */
    readonly useUserIpParam?: pulumi.Input<boolean>;
}
