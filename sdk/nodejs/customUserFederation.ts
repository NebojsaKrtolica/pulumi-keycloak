// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/custom_user_federation.html.markdown.
 */
export class CustomUserFederation extends pulumi.CustomResource {
    /**
     * Get an existing CustomUserFederation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomUserFederationState, opts?: pulumi.CustomResourceOptions): CustomUserFederation {
        return new CustomUserFederation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/customUserFederation:CustomUserFederation';

    /**
     * Returns true if the given object is an instance of CustomUserFederation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomUserFederation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomUserFederation.__pulumiType;
    }

    public readonly cachePolicy!: pulumi.Output<string | undefined>;
    public readonly config!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * When false, this provider will not be used when performing queries for users.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Display name of the provider when displayed in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority of this provider when looking up users. Lower values are first.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * The unique ID of the custom provider, specified in the `getId` implementation for the UserStorageProviderFactory
     * interface
     */
    public readonly providerId!: pulumi.Output<string>;
    /**
     * The realm this provider will provide user federation for.
     */
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a CustomUserFederation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomUserFederationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomUserFederationArgs | CustomUserFederationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CustomUserFederationState | undefined;
            inputs["cachePolicy"] = state ? state.cachePolicy : undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["providerId"] = state ? state.providerId : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as CustomUserFederationArgs | undefined;
            if (!args || args.providerId === undefined) {
                throw new Error("Missing required property 'providerId'");
            }
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["cachePolicy"] = args ? args.cachePolicy : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["providerId"] = args ? args.providerId : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CustomUserFederation.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomUserFederation resources.
 */
export interface CustomUserFederationState {
    readonly cachePolicy?: pulumi.Input<string>;
    readonly config?: pulumi.Input<{[key: string]: any}>;
    /**
     * When false, this provider will not be used when performing queries for users.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Display name of the provider when displayed in the console.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Priority of this provider when looking up users. Lower values are first.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * The unique ID of the custom provider, specified in the `getId` implementation for the UserStorageProviderFactory
     * interface
     */
    readonly providerId?: pulumi.Input<string>;
    /**
     * The realm this provider will provide user federation for.
     */
    readonly realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomUserFederation resource.
 */
export interface CustomUserFederationArgs {
    readonly cachePolicy?: pulumi.Input<string>;
    readonly config?: pulumi.Input<{[key: string]: any}>;
    /**
     * When false, this provider will not be used when performing queries for users.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Display name of the provider when displayed in the console.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Priority of this provider when looking up users. Lower values are first.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * The unique ID of the custom provider, specified in the `getId` implementation for the UserStorageProviderFactory
     * interface
     */
    readonly providerId: pulumi.Input<string>;
    /**
     * The realm this provider will provide user federation for.
     */
    readonly realmId: pulumi.Input<string>;
}
