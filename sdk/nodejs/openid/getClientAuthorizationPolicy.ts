// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getClientAuthorizationPolicy(args: GetClientAuthorizationPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetClientAuthorizationPolicyResult> & GetClientAuthorizationPolicyResult {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise: Promise<GetClientAuthorizationPolicyResult> = pulumi.runtime.invoke("keycloak:openid/getClientAuthorizationPolicy:getClientAuthorizationPolicy", {
        "logic": args.logic,
        "name": args.name,
        "realmId": args.realmId,
        "resourceServerId": args.resourceServerId,
    }, opts);

    return pulumi.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getClientAuthorizationPolicy.
 */
export interface GetClientAuthorizationPolicyArgs {
    readonly logic?: string;
    readonly name: string;
    readonly realmId: string;
    readonly resourceServerId: string;
}

/**
 * A collection of values returned by getClientAuthorizationPolicy.
 */
export interface GetClientAuthorizationPolicyResult {
    readonly decisionStrategy: string;
    readonly logic?: string;
    readonly name: string;
    readonly owner: string;
    readonly policies: string[];
    readonly realmId: string;
    readonly resourceServerId: string;
    readonly resources: string[];
    readonly scopes: string[];
    readonly type: string;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
