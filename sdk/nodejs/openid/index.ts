// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./audienceProtocolMapper";
export * from "./audienceResolveProtocolMappter";
export * from "./client";
export * from "./clientAggregatePolicy";
export * from "./clientAuthorizationPermission";
export * from "./clientAuthorizationResource";
export * from "./clientAuthorizationScope";
export * from "./clientDefaultScopes";
export * from "./clientGroupPolicy";
export * from "./clientJsPolicy";
export * from "./clientOptionalScopes";
export * from "./clientPermissions";
export * from "./clientPolicy";
export * from "./clientRolePolicy";
export * from "./clientScope";
export * from "./clientServiceAccountRealmRole";
export * from "./clientServiceAccountRole";
export * from "./clientTimePolicy";
export * from "./clientUserPolicy";
export * from "./fullNameProtocolMapper";
export * from "./getClient";
export * from "./getClientAuthorizationPolicy";
export * from "./getClientServiceAccountUser";
export * from "./groupMembershipProtocolMapper";
export * from "./hardcodedClaimProtocolMapper";
export * from "./hardcodedRoleProtocolMapper";
export * from "./scriptProtocolMapper";
export * from "./userAttributeProtocolMapper";
export * from "./userClientRoleProtocolMapper";
export * from "./userPropertyProtocolMapper";
export * from "./userRealmRoleProtocolMapper";
export * from "./userSessionNoteProtocolMapper";

// Import resources to register:
import { AudienceProtocolMapper } from "./audienceProtocolMapper";
import { AudienceResolveProtocolMappter } from "./audienceResolveProtocolMappter";
import { Client } from "./client";
import { ClientAggregatePolicy } from "./clientAggregatePolicy";
import { ClientAuthorizationPermission } from "./clientAuthorizationPermission";
import { ClientAuthorizationResource } from "./clientAuthorizationResource";
import { ClientAuthorizationScope } from "./clientAuthorizationScope";
import { ClientDefaultScopes } from "./clientDefaultScopes";
import { ClientGroupPolicy } from "./clientGroupPolicy";
import { ClientJsPolicy } from "./clientJsPolicy";
import { ClientOptionalScopes } from "./clientOptionalScopes";
import { ClientPermissions } from "./clientPermissions";
import { ClientPolicy } from "./clientPolicy";
import { ClientRolePolicy } from "./clientRolePolicy";
import { ClientScope } from "./clientScope";
import { ClientServiceAccountRealmRole } from "./clientServiceAccountRealmRole";
import { ClientServiceAccountRole } from "./clientServiceAccountRole";
import { ClientTimePolicy } from "./clientTimePolicy";
import { ClientUserPolicy } from "./clientUserPolicy";
import { FullNameProtocolMapper } from "./fullNameProtocolMapper";
import { GroupMembershipProtocolMapper } from "./groupMembershipProtocolMapper";
import { HardcodedClaimProtocolMapper } from "./hardcodedClaimProtocolMapper";
import { HardcodedRoleProtocolMapper } from "./hardcodedRoleProtocolMapper";
import { ScriptProtocolMapper } from "./scriptProtocolMapper";
import { UserAttributeProtocolMapper } from "./userAttributeProtocolMapper";
import { UserClientRoleProtocolMapper } from "./userClientRoleProtocolMapper";
import { UserPropertyProtocolMapper } from "./userPropertyProtocolMapper";
import { UserRealmRoleProtocolMapper } from "./userRealmRoleProtocolMapper";
import { UserSessionNoteProtocolMapper } from "./userSessionNoteProtocolMapper";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "keycloak:openid/audienceProtocolMapper:AudienceProtocolMapper":
                return new AudienceProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/audienceResolveProtocolMappter:AudienceResolveProtocolMappter":
                return new AudienceResolveProtocolMappter(name, <any>undefined, { urn })
            case "keycloak:openid/client:Client":
                return new Client(name, <any>undefined, { urn })
            case "keycloak:openid/clientAggregatePolicy:ClientAggregatePolicy":
                return new ClientAggregatePolicy(name, <any>undefined, { urn })
            case "keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission":
                return new ClientAuthorizationPermission(name, <any>undefined, { urn })
            case "keycloak:openid/clientAuthorizationResource:ClientAuthorizationResource":
                return new ClientAuthorizationResource(name, <any>undefined, { urn })
            case "keycloak:openid/clientAuthorizationScope:ClientAuthorizationScope":
                return new ClientAuthorizationScope(name, <any>undefined, { urn })
            case "keycloak:openid/clientDefaultScopes:ClientDefaultScopes":
                return new ClientDefaultScopes(name, <any>undefined, { urn })
            case "keycloak:openid/clientGroupPolicy:ClientGroupPolicy":
                return new ClientGroupPolicy(name, <any>undefined, { urn })
            case "keycloak:openid/clientJsPolicy:ClientJsPolicy":
                return new ClientJsPolicy(name, <any>undefined, { urn })
            case "keycloak:openid/clientOptionalScopes:ClientOptionalScopes":
                return new ClientOptionalScopes(name, <any>undefined, { urn })
            case "keycloak:openid/clientPermissions:ClientPermissions":
                return new ClientPermissions(name, <any>undefined, { urn })
            case "keycloak:openid/clientPolicy:ClientPolicy":
                return new ClientPolicy(name, <any>undefined, { urn })
            case "keycloak:openid/clientRolePolicy:ClientRolePolicy":
                return new ClientRolePolicy(name, <any>undefined, { urn })
            case "keycloak:openid/clientScope:ClientScope":
                return new ClientScope(name, <any>undefined, { urn })
            case "keycloak:openid/clientServiceAccountRealmRole:ClientServiceAccountRealmRole":
                return new ClientServiceAccountRealmRole(name, <any>undefined, { urn })
            case "keycloak:openid/clientServiceAccountRole:ClientServiceAccountRole":
                return new ClientServiceAccountRole(name, <any>undefined, { urn })
            case "keycloak:openid/clientTimePolicy:ClientTimePolicy":
                return new ClientTimePolicy(name, <any>undefined, { urn })
            case "keycloak:openid/clientUserPolicy:ClientUserPolicy":
                return new ClientUserPolicy(name, <any>undefined, { urn })
            case "keycloak:openid/fullNameProtocolMapper:FullNameProtocolMapper":
                return new FullNameProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/groupMembershipProtocolMapper:GroupMembershipProtocolMapper":
                return new GroupMembershipProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/hardcodedClaimProtocolMapper:HardcodedClaimProtocolMapper":
                return new HardcodedClaimProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/hardcodedRoleProtocolMapper:HardcodedRoleProtocolMapper":
                return new HardcodedRoleProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/scriptProtocolMapper:ScriptProtocolMapper":
                return new ScriptProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/userAttributeProtocolMapper:UserAttributeProtocolMapper":
                return new UserAttributeProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/userClientRoleProtocolMapper:UserClientRoleProtocolMapper":
                return new UserClientRoleProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/userPropertyProtocolMapper:UserPropertyProtocolMapper":
                return new UserPropertyProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/userRealmRoleProtocolMapper:UserRealmRoleProtocolMapper":
                return new UserRealmRoleProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:openid/userSessionNoteProtocolMapper:UserSessionNoteProtocolMapper":
                return new UserSessionNoteProtocolMapper(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("keycloak", "openid/audienceProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/audienceResolveProtocolMappter", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/client", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientAggregatePolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientAuthorizationPermission", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientAuthorizationResource", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientAuthorizationScope", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientDefaultScopes", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientGroupPolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientJsPolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientOptionalScopes", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientPermissions", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientPolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientRolePolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientScope", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientServiceAccountRealmRole", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientServiceAccountRole", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientTimePolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/clientUserPolicy", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/fullNameProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/groupMembershipProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/hardcodedClaimProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/hardcodedRoleProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/scriptProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/userAttributeProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/userClientRoleProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/userPropertyProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/userRealmRoleProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "openid/userSessionNoteProtocolMapper", _module)
