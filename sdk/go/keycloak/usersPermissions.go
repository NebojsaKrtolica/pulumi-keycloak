// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type UsersPermissions struct {
	pulumi.CustomResourceState

	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId pulumi.StringOutput                                 `pulumi:"authorizationResourceServerId"`
	Enabled                       pulumi.BoolOutput                                   `pulumi:"enabled"`
	ImpersonateScope              UsersPermissionsImpersonateScopePtrOutput           `pulumi:"impersonateScope"`
	ManageGroupMembershipScope    UsersPermissionsManageGroupMembershipScopePtrOutput `pulumi:"manageGroupMembershipScope"`
	ManageScope                   UsersPermissionsManageScopePtrOutput                `pulumi:"manageScope"`
	MapRolesScope                 UsersPermissionsMapRolesScopePtrOutput              `pulumi:"mapRolesScope"`
	RealmId                       pulumi.StringOutput                                 `pulumi:"realmId"`
	UserImpersonatedScope         UsersPermissionsUserImpersonatedScopePtrOutput      `pulumi:"userImpersonatedScope"`
	ViewScope                     UsersPermissionsViewScopePtrOutput                  `pulumi:"viewScope"`
}

// NewUsersPermissions registers a new resource with the given unique name, arguments, and options.
func NewUsersPermissions(ctx *pulumi.Context,
	name string, args *UsersPermissionsArgs, opts ...pulumi.ResourceOption) (*UsersPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	var resource UsersPermissions
	err := ctx.RegisterResource("keycloak:index/usersPermissions:UsersPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsersPermissions gets an existing UsersPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsersPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsersPermissionsState, opts ...pulumi.ResourceOption) (*UsersPermissions, error) {
	var resource UsersPermissions
	err := ctx.ReadResource("keycloak:index/usersPermissions:UsersPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsersPermissions resources.
type usersPermissionsState struct {
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId *string                                     `pulumi:"authorizationResourceServerId"`
	Enabled                       *bool                                       `pulumi:"enabled"`
	ImpersonateScope              *UsersPermissionsImpersonateScope           `pulumi:"impersonateScope"`
	ManageGroupMembershipScope    *UsersPermissionsManageGroupMembershipScope `pulumi:"manageGroupMembershipScope"`
	ManageScope                   *UsersPermissionsManageScope                `pulumi:"manageScope"`
	MapRolesScope                 *UsersPermissionsMapRolesScope              `pulumi:"mapRolesScope"`
	RealmId                       *string                                     `pulumi:"realmId"`
	UserImpersonatedScope         *UsersPermissionsUserImpersonatedScope      `pulumi:"userImpersonatedScope"`
	ViewScope                     *UsersPermissionsViewScope                  `pulumi:"viewScope"`
}

type UsersPermissionsState struct {
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId pulumi.StringPtrInput
	Enabled                       pulumi.BoolPtrInput
	ImpersonateScope              UsersPermissionsImpersonateScopePtrInput
	ManageGroupMembershipScope    UsersPermissionsManageGroupMembershipScopePtrInput
	ManageScope                   UsersPermissionsManageScopePtrInput
	MapRolesScope                 UsersPermissionsMapRolesScopePtrInput
	RealmId                       pulumi.StringPtrInput
	UserImpersonatedScope         UsersPermissionsUserImpersonatedScopePtrInput
	ViewScope                     UsersPermissionsViewScopePtrInput
}

func (UsersPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*usersPermissionsState)(nil)).Elem()
}

type usersPermissionsArgs struct {
	ImpersonateScope           *UsersPermissionsImpersonateScope           `pulumi:"impersonateScope"`
	ManageGroupMembershipScope *UsersPermissionsManageGroupMembershipScope `pulumi:"manageGroupMembershipScope"`
	ManageScope                *UsersPermissionsManageScope                `pulumi:"manageScope"`
	MapRolesScope              *UsersPermissionsMapRolesScope              `pulumi:"mapRolesScope"`
	RealmId                    string                                      `pulumi:"realmId"`
	UserImpersonatedScope      *UsersPermissionsUserImpersonatedScope      `pulumi:"userImpersonatedScope"`
	ViewScope                  *UsersPermissionsViewScope                  `pulumi:"viewScope"`
}

// The set of arguments for constructing a UsersPermissions resource.
type UsersPermissionsArgs struct {
	ImpersonateScope           UsersPermissionsImpersonateScopePtrInput
	ManageGroupMembershipScope UsersPermissionsManageGroupMembershipScopePtrInput
	ManageScope                UsersPermissionsManageScopePtrInput
	MapRolesScope              UsersPermissionsMapRolesScopePtrInput
	RealmId                    pulumi.StringInput
	UserImpersonatedScope      UsersPermissionsUserImpersonatedScopePtrInput
	ViewScope                  UsersPermissionsViewScopePtrInput
}

func (UsersPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usersPermissionsArgs)(nil)).Elem()
}

type UsersPermissionsInput interface {
	pulumi.Input

	ToUsersPermissionsOutput() UsersPermissionsOutput
	ToUsersPermissionsOutputWithContext(ctx context.Context) UsersPermissionsOutput
}

func (UsersPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissions)(nil)).Elem()
}

func (i UsersPermissions) ToUsersPermissionsOutput() UsersPermissionsOutput {
	return i.ToUsersPermissionsOutputWithContext(context.Background())
}

func (i UsersPermissions) ToUsersPermissionsOutputWithContext(ctx context.Context) UsersPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsOutput)
}

type UsersPermissionsOutput struct {
	*pulumi.OutputState
}

func (UsersPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsOutput)(nil)).Elem()
}

func (o UsersPermissionsOutput) ToUsersPermissionsOutput() UsersPermissionsOutput {
	return o
}

func (o UsersPermissionsOutput) ToUsersPermissionsOutputWithContext(ctx context.Context) UsersPermissionsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UsersPermissionsOutput{})
}
