// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to fetch properties of a user within Keycloak.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		masterRealm, err := keycloak.LookupRealm(ctx, &keycloak.LookupRealmArgs{
// 			Realm: "master",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		defaultAdminUser, err := keycloak.LookupUser(ctx, &keycloak.LookupUserArgs{
// 			RealmId:  masterRealm.Id,
// 			Username: "keycloak",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("keycloakUserId", defaultAdminUser.Id)
// 		return nil
// 	})
// }
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	var rv LookupUserResult
	err := ctx.Invoke("keycloak:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The realm this user belongs to.
	RealmId string `pulumi:"realmId"`
	// The unique username of this user.
	Username string `pulumi:"username"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// (Computed) A map representing attributes for the user
	Attributes map[string]interface{} `pulumi:"attributes"`
	// (Computed) The user's email.
	Email string `pulumi:"email"`
	// (Computed) Whether the email address was validated or not. Default to `false`.
	EmailVerified bool `pulumi:"emailVerified"`
	// (Computed) When false, this user cannot log in. Defaults to `true`.
	Enabled bool `pulumi:"enabled"`
	// (Computed) The user's federated identities, if applicable. This block has the following schema:
	FederatedIdentities []string `pulumi:"federatedIdentities"`
	// (Computed) The user's first name.
	FirstName string `pulumi:"firstName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Computed) The user's last name.
	LastName string `pulumi:"lastName"`
	RealmId  string `pulumi:"realmId"`
	Username string `pulumi:"username"`
}
