// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package Saml

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # Saml.UserPropertyProtocolMapper
// 
// Allows for creating and managing user property protocol mappers for
// SAML clients within Keycloak.
// 
// SAML user property protocol mappers allow you to map properties of the Keycloak
// user model to an attribute in a SAML assertion. Protocol mappers
// can be defined for a single client, or they can be defined for a client scope which
// can be shared between multiple different clients.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this protocol mapper exists within.
// - `clientId` - (Required if `clientScopeId` is not specified) The SAML client this protocol mapper is attached to.
// - `clientScopeId` - (Required if `clientId` is not specified) The SAML client scope this protocol mapper is attached to.
// - `name` - (Required) The display name of this protocol mapper in the GUI.
// - `userProperty` - (Required) The property of the Keycloak user model to map.
// - `friendlyName` - (Optional) An optional human-friendly name for this attribute.
// - `samlAttributeName` - (Required) The name of the SAML attribute.
// - `samlAttributeNameFormat` - (Required) The SAML attribute Name Format. Can be one of `Unspecified`, `Basic`, or `URI Reference`.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/saml_user_property_protocol_mapper.html.markdown.
type UserPropertyProtocolMapper struct {
	s *pulumi.ResourceState
}

// NewUserPropertyProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewUserPropertyProtocolMapper(ctx *pulumi.Context,
	name string, args *UserPropertyProtocolMapperArgs, opts ...pulumi.ResourceOpt) (*UserPropertyProtocolMapper, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.SamlAttributeName == nil {
		return nil, errors.New("missing required argument 'SamlAttributeName'")
	}
	if args == nil || args.SamlAttributeNameFormat == nil {
		return nil, errors.New("missing required argument 'SamlAttributeNameFormat'")
	}
	if args == nil || args.UserProperty == nil {
		return nil, errors.New("missing required argument 'UserProperty'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientId"] = nil
		inputs["clientScopeId"] = nil
		inputs["friendlyName"] = nil
		inputs["name"] = nil
		inputs["realmId"] = nil
		inputs["samlAttributeName"] = nil
		inputs["samlAttributeNameFormat"] = nil
		inputs["userProperty"] = nil
	} else {
		inputs["clientId"] = args.ClientId
		inputs["clientScopeId"] = args.ClientScopeId
		inputs["friendlyName"] = args.FriendlyName
		inputs["name"] = args.Name
		inputs["realmId"] = args.RealmId
		inputs["samlAttributeName"] = args.SamlAttributeName
		inputs["samlAttributeNameFormat"] = args.SamlAttributeNameFormat
		inputs["userProperty"] = args.UserProperty
	}
	s, err := ctx.RegisterResource("keycloak:Saml/userPropertyProtocolMapper:UserPropertyProtocolMapper", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserPropertyProtocolMapper{s: s}, nil
}

// GetUserPropertyProtocolMapper gets an existing UserPropertyProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPropertyProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserPropertyProtocolMapperState, opts ...pulumi.ResourceOpt) (*UserPropertyProtocolMapper, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientId"] = state.ClientId
		inputs["clientScopeId"] = state.ClientScopeId
		inputs["friendlyName"] = state.FriendlyName
		inputs["name"] = state.Name
		inputs["realmId"] = state.RealmId
		inputs["samlAttributeName"] = state.SamlAttributeName
		inputs["samlAttributeNameFormat"] = state.SamlAttributeNameFormat
		inputs["userProperty"] = state.UserProperty
	}
	s, err := ctx.ReadResource("keycloak:Saml/userPropertyProtocolMapper:UserPropertyProtocolMapper", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserPropertyProtocolMapper{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserPropertyProtocolMapper) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserPropertyProtocolMapper) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *UserPropertyProtocolMapper) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

func (r *UserPropertyProtocolMapper) ClientScopeId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientScopeId"])
}

func (r *UserPropertyProtocolMapper) FriendlyName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["friendlyName"])
}

func (r *UserPropertyProtocolMapper) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *UserPropertyProtocolMapper) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *UserPropertyProtocolMapper) SamlAttributeName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["samlAttributeName"])
}

func (r *UserPropertyProtocolMapper) SamlAttributeNameFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["samlAttributeNameFormat"])
}

func (r *UserPropertyProtocolMapper) UserProperty() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userProperty"])
}

// Input properties used for looking up and filtering UserPropertyProtocolMapper resources.
type UserPropertyProtocolMapperState struct {
	ClientId interface{}
	ClientScopeId interface{}
	FriendlyName interface{}
	Name interface{}
	RealmId interface{}
	SamlAttributeName interface{}
	SamlAttributeNameFormat interface{}
	UserProperty interface{}
}

// The set of arguments for constructing a UserPropertyProtocolMapper resource.
type UserPropertyProtocolMapperArgs struct {
	ClientId interface{}
	ClientScopeId interface{}
	FriendlyName interface{}
	Name interface{}
	RealmId interface{}
	SamlAttributeName interface{}
	SamlAttributeNameFormat interface{}
	UserProperty interface{}
}
