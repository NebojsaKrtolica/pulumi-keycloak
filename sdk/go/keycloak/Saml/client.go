// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package Saml

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # Saml.Client
// 
// Allows for creating and managing Keycloak clients that use the SAML protocol.
// 
// Clients are entities that can use Keycloak for user authentication. Typically,
// clients are applications that redirect users to Keycloak for authentication
// in order to take advantage of Keycloak's user sessions for SSO.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this client is attached to.
// - `clientId` - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.
// - `name` - (Optional) The display name of this client in the GUI.
// - `enabled` - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
// - `description` - (Optional) The description of this client in the GUI.
// - `includeAuthnStatement` - (Optional) When `true`, an `AuthnStatement` will be included in the SAML response.
// - `signDocuments` - (Optional) When `true`, the SAML document will be signed by Keycloak using the realm's private key.
// - `signAssertions` - (Optional) When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.
// - `clientSignatureRequired` - (Optional) When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`.
// - `forcePostBinding` - (Optional) When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding.
// - `frontChannelLogout` - (Optional) When `true`, this client will require a browser redirect in order to perform a logout.
// - `nameIdFormat` - (Optional) Sets the Name ID format for the subject.
// - `rootUrl` - (Optional) When specified, this value is prepended to all relative URLs.
// - `validRedirectUris` - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
// - `baseUrl` - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client.
// - `masterSamlProcessingUrl` - (Optional) When specified, this URL will be used for all SAML requests.
// - `signingCertificate` - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature.
// - `signingPrivateKey` - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.
// - `idpInitiatedSsoUrlName` - (Optional) URL fragment name to reference client when you want to do IDP Initiated SSO.
// - `idpInitiatedSsoRelayState` - (Optional) Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
// - `assertionConsumerPostUrl` - (Optional) SAML POST Binding URL for the client's assertion consumer service (login responses).
// - `assertionConsumerRedirectUrl` - (Optional) SAML Redirect Binding URL for the client's assertion consumer service (login responses).
// - `logoutServicePostBindingUrl` - (Optional) SAML POST Binding URL for the client's single logout service.
// - `logoutServiceRedirectBindingUrl` - (Optional) SAML Redirect Binding URL for the client's single logout service.
// - `fullScopeAllowed` - (Optional) - Allow to include all roles mappings in the access token
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/saml_client.html.markdown.
type Client struct {
	s *pulumi.ResourceState
}

// NewClient registers a new resource with the given unique name, arguments, and options.
func NewClient(ctx *pulumi.Context,
	name string, args *ClientArgs, opts ...pulumi.ResourceOpt) (*Client, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["assertionConsumerPostUrl"] = nil
		inputs["assertionConsumerRedirectUrl"] = nil
		inputs["baseUrl"] = nil
		inputs["clientId"] = nil
		inputs["clientSignatureRequired"] = nil
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["forcePostBinding"] = nil
		inputs["frontChannelLogout"] = nil
		inputs["fullScopeAllowed"] = nil
		inputs["idpInitiatedSsoRelayState"] = nil
		inputs["idpInitiatedSsoUrlName"] = nil
		inputs["includeAuthnStatement"] = nil
		inputs["logoutServicePostBindingUrl"] = nil
		inputs["logoutServiceRedirectBindingUrl"] = nil
		inputs["masterSamlProcessingUrl"] = nil
		inputs["name"] = nil
		inputs["nameIdFormat"] = nil
		inputs["realmId"] = nil
		inputs["rootUrl"] = nil
		inputs["signAssertions"] = nil
		inputs["signDocuments"] = nil
		inputs["signingCertificate"] = nil
		inputs["signingPrivateKey"] = nil
		inputs["validRedirectUris"] = nil
	} else {
		inputs["assertionConsumerPostUrl"] = args.AssertionConsumerPostUrl
		inputs["assertionConsumerRedirectUrl"] = args.AssertionConsumerRedirectUrl
		inputs["baseUrl"] = args.BaseUrl
		inputs["clientId"] = args.ClientId
		inputs["clientSignatureRequired"] = args.ClientSignatureRequired
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["forcePostBinding"] = args.ForcePostBinding
		inputs["frontChannelLogout"] = args.FrontChannelLogout
		inputs["fullScopeAllowed"] = args.FullScopeAllowed
		inputs["idpInitiatedSsoRelayState"] = args.IdpInitiatedSsoRelayState
		inputs["idpInitiatedSsoUrlName"] = args.IdpInitiatedSsoUrlName
		inputs["includeAuthnStatement"] = args.IncludeAuthnStatement
		inputs["logoutServicePostBindingUrl"] = args.LogoutServicePostBindingUrl
		inputs["logoutServiceRedirectBindingUrl"] = args.LogoutServiceRedirectBindingUrl
		inputs["masterSamlProcessingUrl"] = args.MasterSamlProcessingUrl
		inputs["name"] = args.Name
		inputs["nameIdFormat"] = args.NameIdFormat
		inputs["realmId"] = args.RealmId
		inputs["rootUrl"] = args.RootUrl
		inputs["signAssertions"] = args.SignAssertions
		inputs["signDocuments"] = args.SignDocuments
		inputs["signingCertificate"] = args.SigningCertificate
		inputs["signingPrivateKey"] = args.SigningPrivateKey
		inputs["validRedirectUris"] = args.ValidRedirectUris
	}
	s, err := ctx.RegisterResource("keycloak:Saml/client:Client", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Client{s: s}, nil
}

// GetClient gets an existing Client resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClient(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientState, opts ...pulumi.ResourceOpt) (*Client, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["assertionConsumerPostUrl"] = state.AssertionConsumerPostUrl
		inputs["assertionConsumerRedirectUrl"] = state.AssertionConsumerRedirectUrl
		inputs["baseUrl"] = state.BaseUrl
		inputs["clientId"] = state.ClientId
		inputs["clientSignatureRequired"] = state.ClientSignatureRequired
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["forcePostBinding"] = state.ForcePostBinding
		inputs["frontChannelLogout"] = state.FrontChannelLogout
		inputs["fullScopeAllowed"] = state.FullScopeAllowed
		inputs["idpInitiatedSsoRelayState"] = state.IdpInitiatedSsoRelayState
		inputs["idpInitiatedSsoUrlName"] = state.IdpInitiatedSsoUrlName
		inputs["includeAuthnStatement"] = state.IncludeAuthnStatement
		inputs["logoutServicePostBindingUrl"] = state.LogoutServicePostBindingUrl
		inputs["logoutServiceRedirectBindingUrl"] = state.LogoutServiceRedirectBindingUrl
		inputs["masterSamlProcessingUrl"] = state.MasterSamlProcessingUrl
		inputs["name"] = state.Name
		inputs["nameIdFormat"] = state.NameIdFormat
		inputs["realmId"] = state.RealmId
		inputs["rootUrl"] = state.RootUrl
		inputs["signAssertions"] = state.SignAssertions
		inputs["signDocuments"] = state.SignDocuments
		inputs["signingCertificate"] = state.SigningCertificate
		inputs["signingPrivateKey"] = state.SigningPrivateKey
		inputs["validRedirectUris"] = state.ValidRedirectUris
	}
	s, err := ctx.ReadResource("keycloak:Saml/client:Client", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Client{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Client) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Client) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Client) AssertionConsumerPostUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["assertionConsumerPostUrl"])
}

func (r *Client) AssertionConsumerRedirectUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["assertionConsumerRedirectUrl"])
}

func (r *Client) BaseUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["baseUrl"])
}

func (r *Client) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

func (r *Client) ClientSignatureRequired() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["clientSignatureRequired"])
}

func (r *Client) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *Client) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *Client) ForcePostBinding() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["forcePostBinding"])
}

func (r *Client) FrontChannelLogout() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["frontChannelLogout"])
}

func (r *Client) FullScopeAllowed() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["fullScopeAllowed"])
}

func (r *Client) IdpInitiatedSsoRelayState() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["idpInitiatedSsoRelayState"])
}

func (r *Client) IdpInitiatedSsoUrlName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["idpInitiatedSsoUrlName"])
}

func (r *Client) IncludeAuthnStatement() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["includeAuthnStatement"])
}

func (r *Client) LogoutServicePostBindingUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["logoutServicePostBindingUrl"])
}

func (r *Client) LogoutServiceRedirectBindingUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["logoutServiceRedirectBindingUrl"])
}

func (r *Client) MasterSamlProcessingUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["masterSamlProcessingUrl"])
}

func (r *Client) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Client) NameIdFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["nameIdFormat"])
}

func (r *Client) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *Client) RootUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rootUrl"])
}

func (r *Client) SignAssertions() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["signAssertions"])
}

func (r *Client) SignDocuments() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["signDocuments"])
}

func (r *Client) SigningCertificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signingCertificate"])
}

func (r *Client) SigningPrivateKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signingPrivateKey"])
}

func (r *Client) ValidRedirectUris() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["validRedirectUris"])
}

// Input properties used for looking up and filtering Client resources.
type ClientState struct {
	AssertionConsumerPostUrl interface{}
	AssertionConsumerRedirectUrl interface{}
	BaseUrl interface{}
	ClientId interface{}
	ClientSignatureRequired interface{}
	Description interface{}
	Enabled interface{}
	ForcePostBinding interface{}
	FrontChannelLogout interface{}
	FullScopeAllowed interface{}
	IdpInitiatedSsoRelayState interface{}
	IdpInitiatedSsoUrlName interface{}
	IncludeAuthnStatement interface{}
	LogoutServicePostBindingUrl interface{}
	LogoutServiceRedirectBindingUrl interface{}
	MasterSamlProcessingUrl interface{}
	Name interface{}
	NameIdFormat interface{}
	RealmId interface{}
	RootUrl interface{}
	SignAssertions interface{}
	SignDocuments interface{}
	SigningCertificate interface{}
	SigningPrivateKey interface{}
	ValidRedirectUris interface{}
}

// The set of arguments for constructing a Client resource.
type ClientArgs struct {
	AssertionConsumerPostUrl interface{}
	AssertionConsumerRedirectUrl interface{}
	BaseUrl interface{}
	ClientId interface{}
	ClientSignatureRequired interface{}
	Description interface{}
	Enabled interface{}
	ForcePostBinding interface{}
	FrontChannelLogout interface{}
	FullScopeAllowed interface{}
	IdpInitiatedSsoRelayState interface{}
	IdpInitiatedSsoUrlName interface{}
	IncludeAuthnStatement interface{}
	LogoutServicePostBindingUrl interface{}
	LogoutServiceRedirectBindingUrl interface{}
	MasterSamlProcessingUrl interface{}
	Name interface{}
	NameIdFormat interface{}
	RealmId interface{}
	RootUrl interface{}
	SignAssertions interface{}
	SignDocuments interface{}
	SigningCertificate interface{}
	SigningPrivateKey interface{}
	ValidRedirectUris interface{}
}
