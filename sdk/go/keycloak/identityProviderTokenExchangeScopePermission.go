// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IdentityProviderTokenExchangeScopePermission struct {
	pulumi.CustomResourceState

	// Resource id representing the identity provider, this automatically created by keycloak
	AuthorizationIdpResourceId pulumi.StringOutput `pulumi:"authorizationIdpResourceId"`
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId pulumi.StringOutput `pulumi:"authorizationResourceServerId"`
	// Permission id representing the Permission with scope 'Token Exchange' and the resource 'authorization_idp_resource_id',
	// this automatically created by keycloak, the policy id will be set on this permission
	AuthorizationTokenExchangeScopePermissionId pulumi.StringOutput `pulumi:"authorizationTokenExchangeScopePermissionId"`
	// Ids of the clients for which a policy will be created and set on scope based token exchange permission
	Clients pulumi.StringArrayOutput `pulumi:"clients"`
	// Policy id that will be set on the scope based token exchange permission automatically created by enabling permissions on
	// the reference identity provider
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Type of policy that is created. At the moment only 'client' type is supported
	PolicyType    pulumi.StringPtrOutput `pulumi:"policyType"`
	ProviderAlias pulumi.StringOutput    `pulumi:"providerAlias"`
	RealmId       pulumi.StringOutput    `pulumi:"realmId"`
}

// NewIdentityProviderTokenExchangeScopePermission registers a new resource with the given unique name, arguments, and options.
func NewIdentityProviderTokenExchangeScopePermission(ctx *pulumi.Context,
	name string, args *IdentityProviderTokenExchangeScopePermissionArgs, opts ...pulumi.ResourceOption) (*IdentityProviderTokenExchangeScopePermission, error) {
	if args == nil || args.Clients == nil {
		return nil, errors.New("missing required argument 'Clients'")
	}
	if args == nil || args.ProviderAlias == nil {
		return nil, errors.New("missing required argument 'ProviderAlias'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &IdentityProviderTokenExchangeScopePermissionArgs{}
	}
	var resource IdentityProviderTokenExchangeScopePermission
	err := ctx.RegisterResource("keycloak:index/identityProviderTokenExchangeScopePermission:IdentityProviderTokenExchangeScopePermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProviderTokenExchangeScopePermission gets an existing IdentityProviderTokenExchangeScopePermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProviderTokenExchangeScopePermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderTokenExchangeScopePermissionState, opts ...pulumi.ResourceOption) (*IdentityProviderTokenExchangeScopePermission, error) {
	var resource IdentityProviderTokenExchangeScopePermission
	err := ctx.ReadResource("keycloak:index/identityProviderTokenExchangeScopePermission:IdentityProviderTokenExchangeScopePermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProviderTokenExchangeScopePermission resources.
type identityProviderTokenExchangeScopePermissionState struct {
	// Resource id representing the identity provider, this automatically created by keycloak
	AuthorizationIdpResourceId *string `pulumi:"authorizationIdpResourceId"`
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId *string `pulumi:"authorizationResourceServerId"`
	// Permission id representing the Permission with scope 'Token Exchange' and the resource 'authorization_idp_resource_id',
	// this automatically created by keycloak, the policy id will be set on this permission
	AuthorizationTokenExchangeScopePermissionId *string `pulumi:"authorizationTokenExchangeScopePermissionId"`
	// Ids of the clients for which a policy will be created and set on scope based token exchange permission
	Clients []string `pulumi:"clients"`
	// Policy id that will be set on the scope based token exchange permission automatically created by enabling permissions on
	// the reference identity provider
	PolicyId *string `pulumi:"policyId"`
	// Type of policy that is created. At the moment only 'client' type is supported
	PolicyType    *string `pulumi:"policyType"`
	ProviderAlias *string `pulumi:"providerAlias"`
	RealmId       *string `pulumi:"realmId"`
}

type IdentityProviderTokenExchangeScopePermissionState struct {
	// Resource id representing the identity provider, this automatically created by keycloak
	AuthorizationIdpResourceId pulumi.StringPtrInput
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId pulumi.StringPtrInput
	// Permission id representing the Permission with scope 'Token Exchange' and the resource 'authorization_idp_resource_id',
	// this automatically created by keycloak, the policy id will be set on this permission
	AuthorizationTokenExchangeScopePermissionId pulumi.StringPtrInput
	// Ids of the clients for which a policy will be created and set on scope based token exchange permission
	Clients pulumi.StringArrayInput
	// Policy id that will be set on the scope based token exchange permission automatically created by enabling permissions on
	// the reference identity provider
	PolicyId pulumi.StringPtrInput
	// Type of policy that is created. At the moment only 'client' type is supported
	PolicyType    pulumi.StringPtrInput
	ProviderAlias pulumi.StringPtrInput
	RealmId       pulumi.StringPtrInput
}

func (IdentityProviderTokenExchangeScopePermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderTokenExchangeScopePermissionState)(nil)).Elem()
}

type identityProviderTokenExchangeScopePermissionArgs struct {
	// Ids of the clients for which a policy will be created and set on scope based token exchange permission
	Clients []string `pulumi:"clients"`
	// Type of policy that is created. At the moment only 'client' type is supported
	PolicyType    *string `pulumi:"policyType"`
	ProviderAlias string  `pulumi:"providerAlias"`
	RealmId       string  `pulumi:"realmId"`
}

// The set of arguments for constructing a IdentityProviderTokenExchangeScopePermission resource.
type IdentityProviderTokenExchangeScopePermissionArgs struct {
	// Ids of the clients for which a policy will be created and set on scope based token exchange permission
	Clients pulumi.StringArrayInput
	// Type of policy that is created. At the moment only 'client' type is supported
	PolicyType    pulumi.StringPtrInput
	ProviderAlias pulumi.StringInput
	RealmId       pulumi.StringInput
}

func (IdentityProviderTokenExchangeScopePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderTokenExchangeScopePermissionArgs)(nil)).Elem()
}
