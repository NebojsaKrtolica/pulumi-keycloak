// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package saml

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClientScope struct {
	pulumi.CustomResourceState

	ConsentScreenText pulumi.StringPtrOutput `pulumi:"consentScreenText"`
	Description       pulumi.StringPtrOutput `pulumi:"description"`
	GuiOrder          pulumi.IntPtrOutput    `pulumi:"guiOrder"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	RealmId           pulumi.StringOutput    `pulumi:"realmId"`
}

// NewClientScope registers a new resource with the given unique name, arguments, and options.
func NewClientScope(ctx *pulumi.Context,
	name string, args *ClientScopeArgs, opts ...pulumi.ResourceOption) (*ClientScope, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &ClientScopeArgs{}
	}
	var resource ClientScope
	err := ctx.RegisterResource("keycloak:saml/clientScope:ClientScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientScope gets an existing ClientScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientScopeState, opts ...pulumi.ResourceOption) (*ClientScope, error) {
	var resource ClientScope
	err := ctx.ReadResource("keycloak:saml/clientScope:ClientScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientScope resources.
type clientScopeState struct {
	ConsentScreenText *string `pulumi:"consentScreenText"`
	Description       *string `pulumi:"description"`
	GuiOrder          *int    `pulumi:"guiOrder"`
	Name              *string `pulumi:"name"`
	RealmId           *string `pulumi:"realmId"`
}

type ClientScopeState struct {
	ConsentScreenText pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	GuiOrder          pulumi.IntPtrInput
	Name              pulumi.StringPtrInput
	RealmId           pulumi.StringPtrInput
}

func (ClientScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientScopeState)(nil)).Elem()
}

type clientScopeArgs struct {
	ConsentScreenText *string `pulumi:"consentScreenText"`
	Description       *string `pulumi:"description"`
	GuiOrder          *int    `pulumi:"guiOrder"`
	Name              *string `pulumi:"name"`
	RealmId           string  `pulumi:"realmId"`
}

// The set of arguments for constructing a ClientScope resource.
type ClientScopeArgs struct {
	ConsentScreenText pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	GuiOrder          pulumi.IntPtrInput
	Name              pulumi.StringPtrInput
	RealmId           pulumi.StringInput
}

func (ClientScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientScopeArgs)(nil)).Elem()
}
