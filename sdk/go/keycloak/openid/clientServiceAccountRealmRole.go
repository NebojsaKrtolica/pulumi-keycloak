// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Allows for assigning realm roles to the service account of an openid client.
// You need to set `serviceAccountsEnabled` to `true` for the openid client that should be assigned the role.
//
// If you'd like to attach client roles to a service account, please use the `openid.ClientServiceAccountRole`
// resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v3/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v3/go/keycloak/openid"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		realmRole, err := keycloak.NewRole(ctx, "realmRole", &keycloak.RoleArgs{
// 			RealmId: realm.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		client, err := openid.NewClient(ctx, "client", &openid.ClientArgs{
// 			RealmId:                realm.ID(),
// 			ServiceAccountsEnabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = openid.NewClientServiceAccountRealmRole(ctx, "clientServiceAccountRole", &openid.ClientServiceAccountRealmRoleArgs{
// 			RealmId:              realm.ID(),
// 			ServiceAccountUserId: client.ServiceAccountUserId,
// 			Role:                 realmRole.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ClientServiceAccountRealmRole struct {
	pulumi.CustomResourceState

	// The realm that the client and role belong to.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// The name of the role that is assigned.
	Role pulumi.StringOutput `pulumi:"role"`
	// The id of the service account that is assigned the role (the service account of the client that "consumes" the role).
	ServiceAccountUserId pulumi.StringOutput `pulumi:"serviceAccountUserId"`
}

// NewClientServiceAccountRealmRole registers a new resource with the given unique name, arguments, and options.
func NewClientServiceAccountRealmRole(ctx *pulumi.Context,
	name string, args *ClientServiceAccountRealmRoleArgs, opts ...pulumi.ResourceOption) (*ClientServiceAccountRealmRole, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil || args.ServiceAccountUserId == nil {
		return nil, errors.New("missing required argument 'ServiceAccountUserId'")
	}
	if args == nil {
		args = &ClientServiceAccountRealmRoleArgs{}
	}
	var resource ClientServiceAccountRealmRole
	err := ctx.RegisterResource("keycloak:openid/clientServiceAccountRealmRole:ClientServiceAccountRealmRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientServiceAccountRealmRole gets an existing ClientServiceAccountRealmRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientServiceAccountRealmRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientServiceAccountRealmRoleState, opts ...pulumi.ResourceOption) (*ClientServiceAccountRealmRole, error) {
	var resource ClientServiceAccountRealmRole
	err := ctx.ReadResource("keycloak:openid/clientServiceAccountRealmRole:ClientServiceAccountRealmRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientServiceAccountRealmRole resources.
type clientServiceAccountRealmRoleState struct {
	// The realm that the client and role belong to.
	RealmId *string `pulumi:"realmId"`
	// The name of the role that is assigned.
	Role *string `pulumi:"role"`
	// The id of the service account that is assigned the role (the service account of the client that "consumes" the role).
	ServiceAccountUserId *string `pulumi:"serviceAccountUserId"`
}

type ClientServiceAccountRealmRoleState struct {
	// The realm that the client and role belong to.
	RealmId pulumi.StringPtrInput
	// The name of the role that is assigned.
	Role pulumi.StringPtrInput
	// The id of the service account that is assigned the role (the service account of the client that "consumes" the role).
	ServiceAccountUserId pulumi.StringPtrInput
}

func (ClientServiceAccountRealmRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientServiceAccountRealmRoleState)(nil)).Elem()
}

type clientServiceAccountRealmRoleArgs struct {
	// The realm that the client and role belong to.
	RealmId string `pulumi:"realmId"`
	// The name of the role that is assigned.
	Role string `pulumi:"role"`
	// The id of the service account that is assigned the role (the service account of the client that "consumes" the role).
	ServiceAccountUserId string `pulumi:"serviceAccountUserId"`
}

// The set of arguments for constructing a ClientServiceAccountRealmRole resource.
type ClientServiceAccountRealmRoleArgs struct {
	// The realm that the client and role belong to.
	RealmId pulumi.StringInput
	// The name of the role that is assigned.
	Role pulumi.StringInput
	// The id of the service account that is assigned the role (the service account of the client that "consumes" the role).
	ServiceAccountUserId pulumi.StringInput
}

func (ClientServiceAccountRealmRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientServiceAccountRealmRoleArgs)(nil)).Elem()
}
