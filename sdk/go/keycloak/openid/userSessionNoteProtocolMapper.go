// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # openid.UserSessionNoteProtocolMapper
//
// Allows for creating and managing user session note protocol mappers within
// Keycloak.
//
// User session note protocol mappers map a custom user session note to a token claim.
// Protocol mappers can be defined for a single client, or they can
// be defined for a client scope which can be shared between multiple different
// clients.
//
// ### Example Usage (Client)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak/openid"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Enabled: pulumi.Bool(true),
// 			Realm:   pulumi.String("my-realm"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		openidClient, err := openid.NewClient(ctx, "openidClient", &openid.ClientArgs{
// 			AccessType: pulumi.String("CONFIDENTIAL"),
// 			ClientId:   pulumi.String("test-client"),
// 			Enabled:    pulumi.Bool(true),
// 			RealmId:    realm.ID(),
// 			ValidRedirectUris: pulumi.StringArray{
// 				pulumi.String("http://localhost:8080/openid-callback"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = openid.NewUserSessionNoteProtocolMapper(ctx, "userSessionNoteClient", &openid.UserSessionNoteProtocolMapperArgs{
// 			AddToAccessToken: pulumi.Bool(false),
// 			AddToIdToken:     pulumi.Bool(true),
// 			ClaimName:        pulumi.String("foo"),
// 			ClaimValueType:   pulumi.String("String"),
// 			ClientId:         openidClient.ID(),
// 			RealmId:          realm.ID(),
// 			SessionNoteLabel: pulumi.String("bar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ### Example Usage (Client Scope)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak/openid"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Enabled: pulumi.Bool(true),
// 			Realm:   pulumi.String("my-realm"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		clientScope, err := openid.NewClientScope(ctx, "clientScope", &openid.ClientScopeArgs{
// 			RealmId: realm.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = openid.NewUserSessionNoteProtocolMapper(ctx, "userSessionNoteClientScope", &openid.UserSessionNoteProtocolMapperArgs{
// 			AddToAccessToken: pulumi.Bool(false),
// 			AddToIdToken:     pulumi.Bool(true),
// 			ClaimName:        pulumi.String("foo"),
// 			ClaimValueType:   pulumi.String("String"),
// 			ClientScopeId:    clientScope.ID(),
// 			RealmId:          realm.ID(),
// 			SessionNoteLabel: pulumi.String("bar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm this protocol mapper exists within.
// - `clientId` - (Required if `clientScopeId` is not specified) The client this protocol mapper is attached to.
// - `clientScopeId` - (Required if `clientId` is not specified) The client scope this protocol mapper is attached to.
// - `name` - (Required) The display name of this protocol mapper in the GUI.
// - `claimName` - (Required) The name of the claim to insert into a token.
// - `claimValueType` - (Optional) The claim type used when serializing JSON tokens. Can be one of `String`, `JSON`, `long`, `int`, or `boolean`. Defaults to `String`.
// - `sessionNoteLabel` - (Optional) String value being the name of stored user session note within the UserSessionModel.note map.
// - `addToIdToken` - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to `true`.
// - `addToAccessToken` - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to `true`.
type UserSessionNoteProtocolMapper struct {
	pulumi.CustomResourceState

	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken pulumi.BoolPtrOutput `pulumi:"addToAccessToken"`
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken pulumi.BoolPtrOutput `pulumi:"addToIdToken"`
	ClaimName    pulumi.StringOutput  `pulumi:"claimName"`
	// Claim type used when serializing tokens.
	ClaimValueType pulumi.StringPtrOutput `pulumi:"claimValueType"`
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrOutput `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// String value being the name of stored user session note within the UserSessionModel.note map.
	SessionNoteLabel pulumi.StringPtrOutput `pulumi:"sessionNoteLabel"`
}

// NewUserSessionNoteProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewUserSessionNoteProtocolMapper(ctx *pulumi.Context,
	name string, args *UserSessionNoteProtocolMapperArgs, opts ...pulumi.ResourceOption) (*UserSessionNoteProtocolMapper, error) {
	if args == nil || args.ClaimName == nil {
		return nil, errors.New("missing required argument 'ClaimName'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &UserSessionNoteProtocolMapperArgs{}
	}
	var resource UserSessionNoteProtocolMapper
	err := ctx.RegisterResource("keycloak:openid/userSessionNoteProtocolMapper:UserSessionNoteProtocolMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSessionNoteProtocolMapper gets an existing UserSessionNoteProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSessionNoteProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSessionNoteProtocolMapperState, opts ...pulumi.ResourceOption) (*UserSessionNoteProtocolMapper, error) {
	var resource UserSessionNoteProtocolMapper
	err := ctx.ReadResource("keycloak:openid/userSessionNoteProtocolMapper:UserSessionNoteProtocolMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSessionNoteProtocolMapper resources.
type userSessionNoteProtocolMapperState struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken *bool `pulumi:"addToAccessToken"`
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken *bool   `pulumi:"addToIdToken"`
	ClaimName    *string `pulumi:"claimName"`
	// Claim type used when serializing tokens.
	ClaimValueType *string `pulumi:"claimValueType"`
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId *string `pulumi:"realmId"`
	// String value being the name of stored user session note within the UserSessionModel.note map.
	SessionNoteLabel *string `pulumi:"sessionNoteLabel"`
}

type UserSessionNoteProtocolMapperState struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken pulumi.BoolPtrInput
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken pulumi.BoolPtrInput
	ClaimName    pulumi.StringPtrInput
	// Claim type used when serializing tokens.
	ClaimValueType pulumi.StringPtrInput
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringPtrInput
	// String value being the name of stored user session note within the UserSessionModel.note map.
	SessionNoteLabel pulumi.StringPtrInput
}

func (UserSessionNoteProtocolMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSessionNoteProtocolMapperState)(nil)).Elem()
}

type userSessionNoteProtocolMapperArgs struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken *bool `pulumi:"addToAccessToken"`
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken *bool  `pulumi:"addToIdToken"`
	ClaimName    string `pulumi:"claimName"`
	// Claim type used when serializing tokens.
	ClaimValueType *string `pulumi:"claimValueType"`
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId string `pulumi:"realmId"`
	// String value being the name of stored user session note within the UserSessionModel.note map.
	SessionNoteLabel *string `pulumi:"sessionNoteLabel"`
}

// The set of arguments for constructing a UserSessionNoteProtocolMapper resource.
type UserSessionNoteProtocolMapperArgs struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken pulumi.BoolPtrInput
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken pulumi.BoolPtrInput
	ClaimName    pulumi.StringInput
	// Claim type used when serializing tokens.
	ClaimValueType pulumi.StringPtrInput
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringInput
	// String value being the name of stored user session note within the UserSessionModel.note map.
	SessionNoteLabel pulumi.StringPtrInput
}

func (UserSessionNoteProtocolMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSessionNoteProtocolMapperArgs)(nil)).Elem()
}
