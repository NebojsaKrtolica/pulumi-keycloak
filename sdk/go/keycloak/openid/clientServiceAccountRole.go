// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # openid.ClientServiceAccountRole
//
// Allows for assigning roles to the service account of an openid client.
//
// You need to set `serviceAccountsEnabled` to `true` for the openid client that should be assigned the role.
//
// ### Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak/openid"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		client1, err := openid.NewClient(ctx, "client1", &openid.ClientArgs{
// 			RealmId: realm.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		client1Role, err := keycloak.NewRole(ctx, "client1Role", &keycloak.RoleArgs{
// 			RealmId:     realm.ID(),
// 			ClientId:    client1.ID(),
// 			Description: pulumi.String("A role that client1 provides"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		client2, err := openid.NewClient(ctx, "client2", &openid.ClientArgs{
// 			RealmId:                realm.ID(),
// 			ServiceAccountsEnabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = openid.NewClientServiceAccountRole(ctx, "client2ServiceAccountRole", &openid.ClientServiceAccountRoleArgs{
// 			RealmId:              realm.ID(),
// 			ServiceAccountUserId: client2.ServiceAccountUserId,
// 			ClientId:             client1.ID(),
// 			Role:                 client1Role.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm the clients and roles belong to.
// - `serviceAccountUserId` - (Required) The id of the service account that is assigned the role (the service account of the client that "consumes" the role).
// - `clientId` - (Required) The id of the client that provides the role.
// - `role` - (Required) The name of the role that is assigned.
type ClientServiceAccountRole struct {
	pulumi.CustomResourceState

	ClientId             pulumi.StringOutput `pulumi:"clientId"`
	RealmId              pulumi.StringOutput `pulumi:"realmId"`
	Role                 pulumi.StringOutput `pulumi:"role"`
	ServiceAccountUserId pulumi.StringOutput `pulumi:"serviceAccountUserId"`
}

// NewClientServiceAccountRole registers a new resource with the given unique name, arguments, and options.
func NewClientServiceAccountRole(ctx *pulumi.Context,
	name string, args *ClientServiceAccountRoleArgs, opts ...pulumi.ResourceOption) (*ClientServiceAccountRole, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil || args.ServiceAccountUserId == nil {
		return nil, errors.New("missing required argument 'ServiceAccountUserId'")
	}
	if args == nil {
		args = &ClientServiceAccountRoleArgs{}
	}
	var resource ClientServiceAccountRole
	err := ctx.RegisterResource("keycloak:openid/clientServiceAccountRole:ClientServiceAccountRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientServiceAccountRole gets an existing ClientServiceAccountRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientServiceAccountRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientServiceAccountRoleState, opts ...pulumi.ResourceOption) (*ClientServiceAccountRole, error) {
	var resource ClientServiceAccountRole
	err := ctx.ReadResource("keycloak:openid/clientServiceAccountRole:ClientServiceAccountRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientServiceAccountRole resources.
type clientServiceAccountRoleState struct {
	ClientId             *string `pulumi:"clientId"`
	RealmId              *string `pulumi:"realmId"`
	Role                 *string `pulumi:"role"`
	ServiceAccountUserId *string `pulumi:"serviceAccountUserId"`
}

type ClientServiceAccountRoleState struct {
	ClientId             pulumi.StringPtrInput
	RealmId              pulumi.StringPtrInput
	Role                 pulumi.StringPtrInput
	ServiceAccountUserId pulumi.StringPtrInput
}

func (ClientServiceAccountRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientServiceAccountRoleState)(nil)).Elem()
}

type clientServiceAccountRoleArgs struct {
	ClientId             string `pulumi:"clientId"`
	RealmId              string `pulumi:"realmId"`
	Role                 string `pulumi:"role"`
	ServiceAccountUserId string `pulumi:"serviceAccountUserId"`
}

// The set of arguments for constructing a ClientServiceAccountRole resource.
type ClientServiceAccountRoleArgs struct {
	ClientId             pulumi.StringInput
	RealmId              pulumi.StringInput
	Role                 pulumi.StringInput
	ServiceAccountUserId pulumi.StringInput
}

func (ClientServiceAccountRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientServiceAccountRoleArgs)(nil)).Elem()
}
