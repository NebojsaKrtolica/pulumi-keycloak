// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # .Group
// 
// Allows for creating and managing Groups within Keycloak.
// 
// Groups provide a logical wrapping for users within Keycloak. Users within a
// group can share attributes and roles, and group membership can be mapped
// to a claim.
// 
// Attributes can also be defined on Groups.
// 
// Groups can also be federated from external data sources, such as LDAP or Active Directory.
// This resource **should not** be used to manage groups that were created this way.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this group exists in.
// - `parentId` - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level.
// - `name` - (Required) The name of the group.
// - `attributes` - (Optional) A dict of key/value pairs to set as custom attributes for the group.
// 
// ### Attributes Reference
// 
// In addition to the arguments listed above, the following computed attributes are exported:
// 
// - `path` - The complete path of the group. For example, the child group's path in the example configuration would be `/parent-group/child-group`.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/group.html.markdown.
type Group struct {
	s *pulumi.ResourceState
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["attributes"] = nil
		inputs["name"] = nil
		inputs["parentId"] = nil
		inputs["realmId"] = nil
	} else {
		inputs["attributes"] = args.Attributes
		inputs["name"] = args.Name
		inputs["parentId"] = args.ParentId
		inputs["realmId"] = args.RealmId
	}
	inputs["path"] = nil
	s, err := ctx.RegisterResource("keycloak:index/group:Group", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attributes"] = state.Attributes
		inputs["name"] = state.Name
		inputs["parentId"] = state.ParentId
		inputs["path"] = state.Path
		inputs["realmId"] = state.RealmId
	}
	s, err := ctx.ReadResource("keycloak:index/group:Group", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Group) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Group) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Group) Attributes() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["attributes"])
}

func (r *Group) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Group) ParentId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["parentId"])
}

func (r *Group) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

func (r *Group) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	Attributes interface{}
	Name interface{}
	ParentId interface{}
	Path interface{}
	RealmId interface{}
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	Attributes interface{}
	Name interface{}
	ParentId interface{}
	RealmId interface{}
}
