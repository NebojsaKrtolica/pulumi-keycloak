// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupPermissions struct {
	pulumi.CustomResourceState

	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId pulumi.StringOutput                            `pulumi:"authorizationResourceServerId"`
	Enabled                       pulumi.BoolOutput                              `pulumi:"enabled"`
	GroupId                       pulumi.StringOutput                            `pulumi:"groupId"`
	ManageMembersScope            GroupPermissionsManageMembersScopePtrOutput    `pulumi:"manageMembersScope"`
	ManageMembershipScope         GroupPermissionsManageMembershipScopePtrOutput `pulumi:"manageMembershipScope"`
	ManageScope                   GroupPermissionsManageScopePtrOutput           `pulumi:"manageScope"`
	RealmId                       pulumi.StringOutput                            `pulumi:"realmId"`
	ViewMembersScope              GroupPermissionsViewMembersScopePtrOutput      `pulumi:"viewMembersScope"`
	ViewScope                     GroupPermissionsViewScopePtrOutput             `pulumi:"viewScope"`
}

// NewGroupPermissions registers a new resource with the given unique name, arguments, and options.
func NewGroupPermissions(ctx *pulumi.Context,
	name string, args *GroupPermissionsArgs, opts ...pulumi.ResourceOption) (*GroupPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	var resource GroupPermissions
	err := ctx.RegisterResource("keycloak:index/groupPermissions:GroupPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPermissions gets an existing GroupPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPermissionsState, opts ...pulumi.ResourceOption) (*GroupPermissions, error) {
	var resource GroupPermissions
	err := ctx.ReadResource("keycloak:index/groupPermissions:GroupPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPermissions resources.
type groupPermissionsState struct {
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId *string                                `pulumi:"authorizationResourceServerId"`
	Enabled                       *bool                                  `pulumi:"enabled"`
	GroupId                       *string                                `pulumi:"groupId"`
	ManageMembersScope            *GroupPermissionsManageMembersScope    `pulumi:"manageMembersScope"`
	ManageMembershipScope         *GroupPermissionsManageMembershipScope `pulumi:"manageMembershipScope"`
	ManageScope                   *GroupPermissionsManageScope           `pulumi:"manageScope"`
	RealmId                       *string                                `pulumi:"realmId"`
	ViewMembersScope              *GroupPermissionsViewMembersScope      `pulumi:"viewMembersScope"`
	ViewScope                     *GroupPermissionsViewScope             `pulumi:"viewScope"`
}

type GroupPermissionsState struct {
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerId pulumi.StringPtrInput
	Enabled                       pulumi.BoolPtrInput
	GroupId                       pulumi.StringPtrInput
	ManageMembersScope            GroupPermissionsManageMembersScopePtrInput
	ManageMembershipScope         GroupPermissionsManageMembershipScopePtrInput
	ManageScope                   GroupPermissionsManageScopePtrInput
	RealmId                       pulumi.StringPtrInput
	ViewMembersScope              GroupPermissionsViewMembersScopePtrInput
	ViewScope                     GroupPermissionsViewScopePtrInput
}

func (GroupPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPermissionsState)(nil)).Elem()
}

type groupPermissionsArgs struct {
	GroupId               string                                 `pulumi:"groupId"`
	ManageMembersScope    *GroupPermissionsManageMembersScope    `pulumi:"manageMembersScope"`
	ManageMembershipScope *GroupPermissionsManageMembershipScope `pulumi:"manageMembershipScope"`
	ManageScope           *GroupPermissionsManageScope           `pulumi:"manageScope"`
	RealmId               string                                 `pulumi:"realmId"`
	ViewMembersScope      *GroupPermissionsViewMembersScope      `pulumi:"viewMembersScope"`
	ViewScope             *GroupPermissionsViewScope             `pulumi:"viewScope"`
}

// The set of arguments for constructing a GroupPermissions resource.
type GroupPermissionsArgs struct {
	GroupId               pulumi.StringInput
	ManageMembersScope    GroupPermissionsManageMembersScopePtrInput
	ManageMembershipScope GroupPermissionsManageMembershipScopePtrInput
	ManageScope           GroupPermissionsManageScopePtrInput
	RealmId               pulumi.StringInput
	ViewMembersScope      GroupPermissionsViewMembersScopePtrInput
	ViewScope             GroupPermissionsViewScopePtrInput
}

func (GroupPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPermissionsArgs)(nil)).Elem()
}

type GroupPermissionsInput interface {
	pulumi.Input

	ToGroupPermissionsOutput() GroupPermissionsOutput
	ToGroupPermissionsOutputWithContext(ctx context.Context) GroupPermissionsOutput
}

func (*GroupPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissions)(nil))
}

func (i *GroupPermissions) ToGroupPermissionsOutput() GroupPermissionsOutput {
	return i.ToGroupPermissionsOutputWithContext(context.Background())
}

func (i *GroupPermissions) ToGroupPermissionsOutputWithContext(ctx context.Context) GroupPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsOutput)
}

func (i *GroupPermissions) ToGroupPermissionsPtrOutput() GroupPermissionsPtrOutput {
	return i.ToGroupPermissionsPtrOutputWithContext(context.Background())
}

func (i *GroupPermissions) ToGroupPermissionsPtrOutputWithContext(ctx context.Context) GroupPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsPtrOutput)
}

type GroupPermissionsPtrInput interface {
	pulumi.Input

	ToGroupPermissionsPtrOutput() GroupPermissionsPtrOutput
	ToGroupPermissionsPtrOutputWithContext(ctx context.Context) GroupPermissionsPtrOutput
}

type groupPermissionsPtrType GroupPermissionsArgs

func (*groupPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissions)(nil))
}

func (i *groupPermissionsPtrType) ToGroupPermissionsPtrOutput() GroupPermissionsPtrOutput {
	return i.ToGroupPermissionsPtrOutputWithContext(context.Background())
}

func (i *groupPermissionsPtrType) ToGroupPermissionsPtrOutputWithContext(ctx context.Context) GroupPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsPtrOutput)
}

// GroupPermissionsArrayInput is an input type that accepts GroupPermissionsArray and GroupPermissionsArrayOutput values.
// You can construct a concrete instance of `GroupPermissionsArrayInput` via:
//
//          GroupPermissionsArray{ GroupPermissionsArgs{...} }
type GroupPermissionsArrayInput interface {
	pulumi.Input

	ToGroupPermissionsArrayOutput() GroupPermissionsArrayOutput
	ToGroupPermissionsArrayOutputWithContext(context.Context) GroupPermissionsArrayOutput
}

type GroupPermissionsArray []GroupPermissionsInput

func (GroupPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPermissions)(nil)).Elem()
}

func (i GroupPermissionsArray) ToGroupPermissionsArrayOutput() GroupPermissionsArrayOutput {
	return i.ToGroupPermissionsArrayOutputWithContext(context.Background())
}

func (i GroupPermissionsArray) ToGroupPermissionsArrayOutputWithContext(ctx context.Context) GroupPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsArrayOutput)
}

// GroupPermissionsMapInput is an input type that accepts GroupPermissionsMap and GroupPermissionsMapOutput values.
// You can construct a concrete instance of `GroupPermissionsMapInput` via:
//
//          GroupPermissionsMap{ "key": GroupPermissionsArgs{...} }
type GroupPermissionsMapInput interface {
	pulumi.Input

	ToGroupPermissionsMapOutput() GroupPermissionsMapOutput
	ToGroupPermissionsMapOutputWithContext(context.Context) GroupPermissionsMapOutput
}

type GroupPermissionsMap map[string]GroupPermissionsInput

func (GroupPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPermissions)(nil)).Elem()
}

func (i GroupPermissionsMap) ToGroupPermissionsMapOutput() GroupPermissionsMapOutput {
	return i.ToGroupPermissionsMapOutputWithContext(context.Background())
}

func (i GroupPermissionsMap) ToGroupPermissionsMapOutputWithContext(ctx context.Context) GroupPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsMapOutput)
}

type GroupPermissionsOutput struct{ *pulumi.OutputState }

func (GroupPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissions)(nil))
}

func (o GroupPermissionsOutput) ToGroupPermissionsOutput() GroupPermissionsOutput {
	return o
}

func (o GroupPermissionsOutput) ToGroupPermissionsOutputWithContext(ctx context.Context) GroupPermissionsOutput {
	return o
}

func (o GroupPermissionsOutput) ToGroupPermissionsPtrOutput() GroupPermissionsPtrOutput {
	return o.ToGroupPermissionsPtrOutputWithContext(context.Background())
}

func (o GroupPermissionsOutput) ToGroupPermissionsPtrOutputWithContext(ctx context.Context) GroupPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPermissions) *GroupPermissions {
		return &v
	}).(GroupPermissionsPtrOutput)
}

type GroupPermissionsPtrOutput struct{ *pulumi.OutputState }

func (GroupPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissions)(nil))
}

func (o GroupPermissionsPtrOutput) ToGroupPermissionsPtrOutput() GroupPermissionsPtrOutput {
	return o
}

func (o GroupPermissionsPtrOutput) ToGroupPermissionsPtrOutputWithContext(ctx context.Context) GroupPermissionsPtrOutput {
	return o
}

func (o GroupPermissionsPtrOutput) Elem() GroupPermissionsOutput {
	return o.ApplyT(func(v *GroupPermissions) GroupPermissions {
		if v != nil {
			return *v
		}
		var ret GroupPermissions
		return ret
	}).(GroupPermissionsOutput)
}

type GroupPermissionsArrayOutput struct{ *pulumi.OutputState }

func (GroupPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPermissions)(nil))
}

func (o GroupPermissionsArrayOutput) ToGroupPermissionsArrayOutput() GroupPermissionsArrayOutput {
	return o
}

func (o GroupPermissionsArrayOutput) ToGroupPermissionsArrayOutputWithContext(ctx context.Context) GroupPermissionsArrayOutput {
	return o
}

func (o GroupPermissionsArrayOutput) Index(i pulumi.IntInput) GroupPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPermissions {
		return vs[0].([]GroupPermissions)[vs[1].(int)]
	}).(GroupPermissionsOutput)
}

type GroupPermissionsMapOutput struct{ *pulumi.OutputState }

func (GroupPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GroupPermissions)(nil))
}

func (o GroupPermissionsMapOutput) ToGroupPermissionsMapOutput() GroupPermissionsMapOutput {
	return o
}

func (o GroupPermissionsMapOutput) ToGroupPermissionsMapOutputWithContext(ctx context.Context) GroupPermissionsMapOutput {
	return o
}

func (o GroupPermissionsMapOutput) MapIndex(k pulumi.StringInput) GroupPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GroupPermissions {
		return vs[0].(map[string]GroupPermissions)[vs[1].(string)]
	}).(GroupPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsInput)(nil)).Elem(), &GroupPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsPtrInput)(nil)).Elem(), &GroupPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsArrayInput)(nil)).Elem(), GroupPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsMapInput)(nil)).Elem(), GroupPermissionsMap{})
	pulumi.RegisterOutputType(GroupPermissionsOutput{})
	pulumi.RegisterOutputType(GroupPermissionsPtrOutput{})
	pulumi.RegisterOutputType(GroupPermissionsArrayOutput{})
	pulumi.RegisterOutputType(GroupPermissionsMapOutput{})
}
