// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # OpenId.ClientScope
// 
// Allows for creating and managing Keycloak client scopes that can be attached to
// clients that use the OpenID Connect protocol.
// 
// Client Scopes can be used to share common protocol and role mappings between multiple
// clients within a realm. They can also be used by clients to conditionally request
// claims or roles for a user based on the OAuth 2.0 `scope` parameter.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this client scope belongs to.
// - `name` - (Required) The display name of this client scope in the GUI.
// - `description` - (Optional) The description of this client scope in the GUI.
// - `consentScreenText` - (Optional) When set, a consent screen will be displayed to users
// authenticating to clients with this scope attached. The consent screen will display the string
// value of this attribute.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/openid_client_scope.html.markdown.
type ClientScope struct {
	s *pulumi.ResourceState
}

// NewClientScope registers a new resource with the given unique name, arguments, and options.
func NewClientScope(ctx *pulumi.Context,
	name string, args *ClientScopeArgs, opts ...pulumi.ResourceOpt) (*ClientScope, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["consentScreenText"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["realmId"] = nil
	} else {
		inputs["consentScreenText"] = args.ConsentScreenText
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["realmId"] = args.RealmId
	}
	s, err := ctx.RegisterResource("keycloak:OpenId/clientScope:ClientScope", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientScope{s: s}, nil
}

// GetClientScope gets an existing ClientScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientScope(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientScopeState, opts ...pulumi.ResourceOpt) (*ClientScope, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["consentScreenText"] = state.ConsentScreenText
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["realmId"] = state.RealmId
	}
	s, err := ctx.ReadResource("keycloak:OpenId/clientScope:ClientScope", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientScope{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClientScope) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClientScope) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *ClientScope) ConsentScreenText() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["consentScreenText"])
}

func (r *ClientScope) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *ClientScope) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *ClientScope) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// Input properties used for looking up and filtering ClientScope resources.
type ClientScopeState struct {
	ConsentScreenText interface{}
	Description interface{}
	Name interface{}
	RealmId interface{}
}

// The set of arguments for constructing a ClientScope resource.
type ClientScopeArgs struct {
	ConsentScreenText interface{}
	Description interface{}
	Name interface{}
	RealmId interface{}
}
