// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # OpenId.FullNameProtocolMapper
// 
// Allows for creating and managing full name protocol mappers within
// Keycloak.
// 
// Full name protocol mappers allow you to map a user's first and last name
// to the OpenID Connect `name` claim in a token. Protocol mappers can be defined
// for a single client, or they can be defined for a client scope which can
// be shared between multiple different clients.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this protocol mapper exists within.
// - `clientId` - (Required if `clientScopeId` is not specified) The client this protocol mapper is attached to.
// - `clientScopeId` - (Required if `clientId` is not specified) The client scope this protocol mapper is attached to.
// - `name` - (Required) The display name of this protocol mapper in the GUI.
// - `addToIdToken` - (Optional) Indicates if the user's full name should be added as a claim to the id token. Defaults to `true`.
// - `addToAccessToken` - (Optional) Indicates if the user's full name should be added as a claim to the access token. Defaults to `true`.
// - `addToUserinfo` - (Optional) Indicates if the user's full name should be added as a claim to the UserInfo response body. Defaults to `true`.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/openid_full_name_protocol_mapper.html.markdown.
type FullNameProtocolMapper struct {
	s *pulumi.ResourceState
}

// NewFullNameProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewFullNameProtocolMapper(ctx *pulumi.Context,
	name string, args *FullNameProtocolMapperArgs, opts ...pulumi.ResourceOpt) (*FullNameProtocolMapper, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["addToAccessToken"] = nil
		inputs["addToIdToken"] = nil
		inputs["addToUserinfo"] = nil
		inputs["clientId"] = nil
		inputs["clientScopeId"] = nil
		inputs["name"] = nil
		inputs["realmId"] = nil
	} else {
		inputs["addToAccessToken"] = args.AddToAccessToken
		inputs["addToIdToken"] = args.AddToIdToken
		inputs["addToUserinfo"] = args.AddToUserinfo
		inputs["clientId"] = args.ClientId
		inputs["clientScopeId"] = args.ClientScopeId
		inputs["name"] = args.Name
		inputs["realmId"] = args.RealmId
	}
	s, err := ctx.RegisterResource("keycloak:OpenId/fullNameProtocolMapper:FullNameProtocolMapper", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FullNameProtocolMapper{s: s}, nil
}

// GetFullNameProtocolMapper gets an existing FullNameProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFullNameProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FullNameProtocolMapperState, opts ...pulumi.ResourceOpt) (*FullNameProtocolMapper, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["addToAccessToken"] = state.AddToAccessToken
		inputs["addToIdToken"] = state.AddToIdToken
		inputs["addToUserinfo"] = state.AddToUserinfo
		inputs["clientId"] = state.ClientId
		inputs["clientScopeId"] = state.ClientScopeId
		inputs["name"] = state.Name
		inputs["realmId"] = state.RealmId
	}
	s, err := ctx.ReadResource("keycloak:OpenId/fullNameProtocolMapper:FullNameProtocolMapper", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FullNameProtocolMapper{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FullNameProtocolMapper) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FullNameProtocolMapper) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *FullNameProtocolMapper) AddToAccessToken() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["addToAccessToken"])
}

func (r *FullNameProtocolMapper) AddToIdToken() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["addToIdToken"])
}

func (r *FullNameProtocolMapper) AddToUserinfo() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["addToUserinfo"])
}

// The mapper's associated client. Cannot be used at the same time as client_scope_id.
func (r *FullNameProtocolMapper) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

// The mapper's associated client scope. Cannot be used at the same time as client_id.
func (r *FullNameProtocolMapper) ClientScopeId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientScopeId"])
}

// A human-friendly name that will appear in the Keycloak console.
func (r *FullNameProtocolMapper) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The realm id where the associated client or client scope exists.
func (r *FullNameProtocolMapper) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// Input properties used for looking up and filtering FullNameProtocolMapper resources.
type FullNameProtocolMapperState struct {
	AddToAccessToken interface{}
	AddToIdToken interface{}
	AddToUserinfo interface{}
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId interface{}
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId interface{}
	// A human-friendly name that will appear in the Keycloak console.
	Name interface{}
	// The realm id where the associated client or client scope exists.
	RealmId interface{}
}

// The set of arguments for constructing a FullNameProtocolMapper resource.
type FullNameProtocolMapperArgs struct {
	AddToAccessToken interface{}
	AddToIdToken interface{}
	AddToUserinfo interface{}
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId interface{}
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId interface{}
	// A human-friendly name that will appear in the Keycloak console.
	Name interface{}
	// The realm id where the associated client or client scope exists.
	RealmId interface{}
}
