// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/openid_client_default_scopes.html.markdown.
type ClientDefaultScopes struct {
	s *pulumi.ResourceState
}

// NewClientDefaultScopes registers a new resource with the given unique name, arguments, and options.
func NewClientDefaultScopes(ctx *pulumi.Context,
	name string, args *ClientDefaultScopesArgs, opts ...pulumi.ResourceOpt) (*ClientDefaultScopes, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.DefaultScopes == nil {
		return nil, errors.New("missing required argument 'DefaultScopes'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientId"] = nil
		inputs["defaultScopes"] = nil
		inputs["realmId"] = nil
	} else {
		inputs["clientId"] = args.ClientId
		inputs["defaultScopes"] = args.DefaultScopes
		inputs["realmId"] = args.RealmId
	}
	s, err := ctx.RegisterResource("keycloak:OpenId/clientDefaultScopes:ClientDefaultScopes", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientDefaultScopes{s: s}, nil
}

// GetClientDefaultScopes gets an existing ClientDefaultScopes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientDefaultScopes(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientDefaultScopesState, opts ...pulumi.ResourceOpt) (*ClientDefaultScopes, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientId"] = state.ClientId
		inputs["defaultScopes"] = state.DefaultScopes
		inputs["realmId"] = state.RealmId
	}
	s, err := ctx.ReadResource("keycloak:OpenId/clientDefaultScopes:ClientDefaultScopes", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientDefaultScopes{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClientDefaultScopes) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClientDefaultScopes) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *ClientDefaultScopes) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

func (r *ClientDefaultScopes) DefaultScopes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["defaultScopes"])
}

func (r *ClientDefaultScopes) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// Input properties used for looking up and filtering ClientDefaultScopes resources.
type ClientDefaultScopesState struct {
	ClientId interface{}
	DefaultScopes interface{}
	RealmId interface{}
}

// The set of arguments for constructing a ClientDefaultScopes resource.
type ClientDefaultScopesArgs struct {
	ClientId interface{}
	DefaultScopes interface{}
	RealmId interface{}
}
