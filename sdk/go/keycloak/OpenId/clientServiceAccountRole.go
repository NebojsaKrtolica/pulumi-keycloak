// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClientServiceAccountRole struct {
	s *pulumi.ResourceState
}

// NewClientServiceAccountRole registers a new resource with the given unique name, arguments, and options.
func NewClientServiceAccountRole(ctx *pulumi.Context,
	name string, args *ClientServiceAccountRoleArgs, opts ...pulumi.ResourceOpt) (*ClientServiceAccountRole, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil || args.ServiceAccountUserId == nil {
		return nil, errors.New("missing required argument 'ServiceAccountUserId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientId"] = nil
		inputs["realmId"] = nil
		inputs["role"] = nil
		inputs["serviceAccountUserId"] = nil
	} else {
		inputs["clientId"] = args.ClientId
		inputs["realmId"] = args.RealmId
		inputs["role"] = args.Role
		inputs["serviceAccountUserId"] = args.ServiceAccountUserId
	}
	s, err := ctx.RegisterResource("keycloak:OpenId/clientServiceAccountRole:ClientServiceAccountRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientServiceAccountRole{s: s}, nil
}

// GetClientServiceAccountRole gets an existing ClientServiceAccountRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientServiceAccountRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientServiceAccountRoleState, opts ...pulumi.ResourceOpt) (*ClientServiceAccountRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientId"] = state.ClientId
		inputs["realmId"] = state.RealmId
		inputs["role"] = state.Role
		inputs["serviceAccountUserId"] = state.ServiceAccountUserId
	}
	s, err := ctx.ReadResource("keycloak:OpenId/clientServiceAccountRole:ClientServiceAccountRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientServiceAccountRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClientServiceAccountRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClientServiceAccountRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *ClientServiceAccountRole) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

func (r *ClientServiceAccountRole) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *ClientServiceAccountRole) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

func (r *ClientServiceAccountRole) ServiceAccountUserId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccountUserId"])
}

// Input properties used for looking up and filtering ClientServiceAccountRole resources.
type ClientServiceAccountRoleState struct {
	ClientId interface{}
	RealmId interface{}
	Role interface{}
	ServiceAccountUserId interface{}
}

// The set of arguments for constructing a ClientServiceAccountRole resource.
type ClientServiceAccountRoleArgs struct {
	ClientId interface{}
	RealmId interface{}
	Role interface{}
	ServiceAccountUserId interface{}
}
