// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClientAuthorizationScope struct {
	s *pulumi.ResourceState
}

// NewClientAuthorizationScope registers a new resource with the given unique name, arguments, and options.
func NewClientAuthorizationScope(ctx *pulumi.Context,
	name string, args *ClientAuthorizationScopeArgs, opts ...pulumi.ResourceOpt) (*ClientAuthorizationScope, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.ResourceServerId == nil {
		return nil, errors.New("missing required argument 'ResourceServerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["displayName"] = nil
		inputs["iconUri"] = nil
		inputs["name"] = nil
		inputs["realmId"] = nil
		inputs["resourceServerId"] = nil
	} else {
		inputs["displayName"] = args.DisplayName
		inputs["iconUri"] = args.IconUri
		inputs["name"] = args.Name
		inputs["realmId"] = args.RealmId
		inputs["resourceServerId"] = args.ResourceServerId
	}
	s, err := ctx.RegisterResource("keycloak:OpenId/clientAuthorizationScope:ClientAuthorizationScope", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientAuthorizationScope{s: s}, nil
}

// GetClientAuthorizationScope gets an existing ClientAuthorizationScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientAuthorizationScope(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientAuthorizationScopeState, opts ...pulumi.ResourceOpt) (*ClientAuthorizationScope, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["displayName"] = state.DisplayName
		inputs["iconUri"] = state.IconUri
		inputs["name"] = state.Name
		inputs["realmId"] = state.RealmId
		inputs["resourceServerId"] = state.ResourceServerId
	}
	s, err := ctx.ReadResource("keycloak:OpenId/clientAuthorizationScope:ClientAuthorizationScope", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientAuthorizationScope{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClientAuthorizationScope) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClientAuthorizationScope) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *ClientAuthorizationScope) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

func (r *ClientAuthorizationScope) IconUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iconUri"])
}

func (r *ClientAuthorizationScope) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *ClientAuthorizationScope) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *ClientAuthorizationScope) ResourceServerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceServerId"])
}

// Input properties used for looking up and filtering ClientAuthorizationScope resources.
type ClientAuthorizationScopeState struct {
	DisplayName interface{}
	IconUri interface{}
	Name interface{}
	RealmId interface{}
	ResourceServerId interface{}
}

// The set of arguments for constructing a ClientAuthorizationScope resource.
type ClientAuthorizationScopeArgs struct {
	DisplayName interface{}
	IconUri interface{}
	Name interface{}
	RealmId interface{}
	ResourceServerId interface{}
}
