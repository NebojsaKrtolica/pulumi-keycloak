// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # OpenId.Client
// 
// Allows for creating and managing Keycloak clients that use the OpenID Connect protocol.
// 
// Clients are entities that can use Keycloak for user authentication. Typically,
// clients are applications that redirect users to Keycloak for authentication
// in order to take advantage of Keycloak's user sessions for SSO.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this client is attached to.
// - `clientId` - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.
// - `name` - (Optional) The display name of this client in the GUI.
// - `enabled` - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
// - `description` - (Optional) The description of this client in the GUI.
// - `accessType` - (Required) Specifies the type of client, which can be one of the following:
//     - `CONFIDENTIAL` - Used for server-side clients that require both client ID and secret when authenticating.
//       This client should be used for applications using the Authorization Code or Client Credentials grant flows.
//     - `PUBLIC` - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect
//       URIs for security. This client should be used for applications using the Implicit grant flow.
//     - `BEARER-ONLY` - Used for services that never initiate a login. This client will only allow bearer token requests.
// - `clientSecret` - (Optional) The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and
// should be treated with the same care as a password. If omitted, Keycloak will generate a GUID for this attribute.
// - `standardFlowEnabled` - (Optional) When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
// - `implicitFlowEnabled` - (Optional) When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
// - `directAccessGrantsEnabled` - (Optional) When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
// - `serviceAccountsEnabled` - (Optional) When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
// - `validRedirectUris` - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
// is set to `true`.
// - `webOrigins` - (Optional) A list of allowed CORS origins. `+` can be used to permit all valid redirect URIs, and `*` can be used to permit all origins.
// - `adminUrl` - (Optional) URL to the admin interface of the client.
// - `baseUrl` - (Optional) Default URL to use when the auth server needs to redirect or link back to the client.
// - `pkceCodeChallengeMethod` - (Optional) The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
// - `fullScopeAllowed` - (Optional) - Allow to include all roles mappings in the access token.
// 
// ### Attributes Reference
// 
// In addition to the arguments listed above, the following computed attributes are exported:
// 
// - `serviceAccountUserId` - When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/openid_client.html.markdown.
type Client struct {
	s *pulumi.ResourceState
}

// NewClient registers a new resource with the given unique name, arguments, and options.
func NewClient(ctx *pulumi.Context,
	name string, args *ClientArgs, opts ...pulumi.ResourceOpt) (*Client, error) {
	if args == nil || args.AccessType == nil {
		return nil, errors.New("missing required argument 'AccessType'")
	}
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessType"] = nil
		inputs["authorization"] = nil
		inputs["clientId"] = nil
		inputs["clientSecret"] = nil
		inputs["description"] = nil
		inputs["directAccessGrantsEnabled"] = nil
		inputs["enabled"] = nil
		inputs["excludeSessionStateFromAuthResponse"] = nil
		inputs["fullScopeAllowed"] = nil
		inputs["implicitFlowEnabled"] = nil
		inputs["name"] = nil
		inputs["pkceCodeChallengeMethod"] = nil
		inputs["realmId"] = nil
		inputs["serviceAccountsEnabled"] = nil
		inputs["standardFlowEnabled"] = nil
		inputs["validRedirectUris"] = nil
		inputs["webOrigins"] = nil
	} else {
		inputs["accessType"] = args.AccessType
		inputs["authorization"] = args.Authorization
		inputs["clientId"] = args.ClientId
		inputs["clientSecret"] = args.ClientSecret
		inputs["description"] = args.Description
		inputs["directAccessGrantsEnabled"] = args.DirectAccessGrantsEnabled
		inputs["enabled"] = args.Enabled
		inputs["excludeSessionStateFromAuthResponse"] = args.ExcludeSessionStateFromAuthResponse
		inputs["fullScopeAllowed"] = args.FullScopeAllowed
		inputs["implicitFlowEnabled"] = args.ImplicitFlowEnabled
		inputs["name"] = args.Name
		inputs["pkceCodeChallengeMethod"] = args.PkceCodeChallengeMethod
		inputs["realmId"] = args.RealmId
		inputs["serviceAccountsEnabled"] = args.ServiceAccountsEnabled
		inputs["standardFlowEnabled"] = args.StandardFlowEnabled
		inputs["validRedirectUris"] = args.ValidRedirectUris
		inputs["webOrigins"] = args.WebOrigins
	}
	inputs["resourceServerId"] = nil
	inputs["serviceAccountUserId"] = nil
	s, err := ctx.RegisterResource("keycloak:OpenId/client:Client", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Client{s: s}, nil
}

// GetClient gets an existing Client resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClient(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientState, opts ...pulumi.ResourceOpt) (*Client, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessType"] = state.AccessType
		inputs["authorization"] = state.Authorization
		inputs["clientId"] = state.ClientId
		inputs["clientSecret"] = state.ClientSecret
		inputs["description"] = state.Description
		inputs["directAccessGrantsEnabled"] = state.DirectAccessGrantsEnabled
		inputs["enabled"] = state.Enabled
		inputs["excludeSessionStateFromAuthResponse"] = state.ExcludeSessionStateFromAuthResponse
		inputs["fullScopeAllowed"] = state.FullScopeAllowed
		inputs["implicitFlowEnabled"] = state.ImplicitFlowEnabled
		inputs["name"] = state.Name
		inputs["pkceCodeChallengeMethod"] = state.PkceCodeChallengeMethod
		inputs["realmId"] = state.RealmId
		inputs["resourceServerId"] = state.ResourceServerId
		inputs["serviceAccountUserId"] = state.ServiceAccountUserId
		inputs["serviceAccountsEnabled"] = state.ServiceAccountsEnabled
		inputs["standardFlowEnabled"] = state.StandardFlowEnabled
		inputs["validRedirectUris"] = state.ValidRedirectUris
		inputs["webOrigins"] = state.WebOrigins
	}
	s, err := ctx.ReadResource("keycloak:OpenId/client:Client", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Client{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Client) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Client) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Client) AccessType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessType"])
}

func (r *Client) Authorization() pulumi.Output {
	return r.s.State["authorization"]
}

func (r *Client) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

func (r *Client) ClientSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientSecret"])
}

func (r *Client) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *Client) DirectAccessGrantsEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["directAccessGrantsEnabled"])
}

func (r *Client) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

func (r *Client) ExcludeSessionStateFromAuthResponse() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["excludeSessionStateFromAuthResponse"])
}

func (r *Client) FullScopeAllowed() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["fullScopeAllowed"])
}

func (r *Client) ImplicitFlowEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["implicitFlowEnabled"])
}

func (r *Client) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Client) PkceCodeChallengeMethod() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pkceCodeChallengeMethod"])
}

func (r *Client) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *Client) ResourceServerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceServerId"])
}

func (r *Client) ServiceAccountUserId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccountUserId"])
}

func (r *Client) ServiceAccountsEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["serviceAccountsEnabled"])
}

func (r *Client) StandardFlowEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["standardFlowEnabled"])
}

func (r *Client) ValidRedirectUris() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["validRedirectUris"])
}

func (r *Client) WebOrigins() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["webOrigins"])
}

// Input properties used for looking up and filtering Client resources.
type ClientState struct {
	AccessType interface{}
	Authorization interface{}
	ClientId interface{}
	ClientSecret interface{}
	Description interface{}
	DirectAccessGrantsEnabled interface{}
	Enabled interface{}
	ExcludeSessionStateFromAuthResponse interface{}
	FullScopeAllowed interface{}
	ImplicitFlowEnabled interface{}
	Name interface{}
	PkceCodeChallengeMethod interface{}
	RealmId interface{}
	ResourceServerId interface{}
	ServiceAccountUserId interface{}
	ServiceAccountsEnabled interface{}
	StandardFlowEnabled interface{}
	ValidRedirectUris interface{}
	WebOrigins interface{}
}

// The set of arguments for constructing a Client resource.
type ClientArgs struct {
	AccessType interface{}
	Authorization interface{}
	ClientId interface{}
	ClientSecret interface{}
	Description interface{}
	DirectAccessGrantsEnabled interface{}
	Enabled interface{}
	ExcludeSessionStateFromAuthResponse interface{}
	FullScopeAllowed interface{}
	ImplicitFlowEnabled interface{}
	Name interface{}
	PkceCodeChallengeMethod interface{}
	RealmId interface{}
	ServiceAccountsEnabled interface{}
	StandardFlowEnabled interface{}
	ValidRedirectUris interface{}
	WebOrigins interface{}
}
