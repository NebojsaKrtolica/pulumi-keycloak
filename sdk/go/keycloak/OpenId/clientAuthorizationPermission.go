// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package OpenId

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClientAuthorizationPermission struct {
	s *pulumi.ResourceState
}

// NewClientAuthorizationPermission registers a new resource with the given unique name, arguments, and options.
func NewClientAuthorizationPermission(ctx *pulumi.Context,
	name string, args *ClientAuthorizationPermissionArgs, opts ...pulumi.ResourceOpt) (*ClientAuthorizationPermission, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.ResourceServerId == nil {
		return nil, errors.New("missing required argument 'ResourceServerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["decisionStrategy"] = nil
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["policies"] = nil
		inputs["realmId"] = nil
		inputs["resourceServerId"] = nil
		inputs["resources"] = nil
		inputs["type"] = nil
	} else {
		inputs["decisionStrategy"] = args.DecisionStrategy
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["policies"] = args.Policies
		inputs["realmId"] = args.RealmId
		inputs["resourceServerId"] = args.ResourceServerId
		inputs["resources"] = args.Resources
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("keycloak:OpenId/clientAuthorizationPermission:ClientAuthorizationPermission", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientAuthorizationPermission{s: s}, nil
}

// GetClientAuthorizationPermission gets an existing ClientAuthorizationPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientAuthorizationPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClientAuthorizationPermissionState, opts ...pulumi.ResourceOpt) (*ClientAuthorizationPermission, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["decisionStrategy"] = state.DecisionStrategy
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["policies"] = state.Policies
		inputs["realmId"] = state.RealmId
		inputs["resourceServerId"] = state.ResourceServerId
		inputs["resources"] = state.Resources
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("keycloak:OpenId/clientAuthorizationPermission:ClientAuthorizationPermission", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientAuthorizationPermission{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClientAuthorizationPermission) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClientAuthorizationPermission) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *ClientAuthorizationPermission) DecisionStrategy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["decisionStrategy"])
}

func (r *ClientAuthorizationPermission) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *ClientAuthorizationPermission) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *ClientAuthorizationPermission) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

func (r *ClientAuthorizationPermission) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *ClientAuthorizationPermission) ResourceServerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceServerId"])
}

func (r *ClientAuthorizationPermission) Resources() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["resources"])
}

func (r *ClientAuthorizationPermission) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering ClientAuthorizationPermission resources.
type ClientAuthorizationPermissionState struct {
	DecisionStrategy interface{}
	Description interface{}
	Name interface{}
	Policies interface{}
	RealmId interface{}
	ResourceServerId interface{}
	Resources interface{}
	Type interface{}
}

// The set of arguments for constructing a ClientAuthorizationPermission resource.
type ClientAuthorizationPermissionArgs struct {
	DecisionStrategy interface{}
	Description interface{}
	Name interface{}
	Policies interface{}
	RealmId interface{}
	ResourceServerId interface{}
	Resources interface{}
	Type interface{}
}
