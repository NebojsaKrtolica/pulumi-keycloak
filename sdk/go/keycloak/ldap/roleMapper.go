// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RoleMapper struct {
	pulumi.CustomResourceState

	ClientId    pulumi.StringPtrOutput `pulumi:"clientId"`
	LdapRolesDn pulumi.StringOutput    `pulumi:"ldapRolesDn"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        pulumi.StringOutput    `pulumi:"ldapUserFederationId"`
	MemberofLdapAttribute       pulumi.StringPtrOutput `pulumi:"memberofLdapAttribute"`
	MembershipAttributeType     pulumi.StringPtrOutput `pulumi:"membershipAttributeType"`
	MembershipLdapAttribute     pulumi.StringOutput    `pulumi:"membershipLdapAttribute"`
	MembershipUserLdapAttribute pulumi.StringOutput    `pulumi:"membershipUserLdapAttribute"`
	Mode                        pulumi.StringPtrOutput `pulumi:"mode"`
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId                   pulumi.StringOutput      `pulumi:"realmId"`
	RoleNameLdapAttribute     pulumi.StringOutput      `pulumi:"roleNameLdapAttribute"`
	RoleObjectClasses         pulumi.StringArrayOutput `pulumi:"roleObjectClasses"`
	RolesLdapFilter           pulumi.StringPtrOutput   `pulumi:"rolesLdapFilter"`
	UseRealmRolesMapping      pulumi.BoolPtrOutput     `pulumi:"useRealmRolesMapping"`
	UserRolesRetrieveStrategy pulumi.StringPtrOutput   `pulumi:"userRolesRetrieveStrategy"`
}

// NewRoleMapper registers a new resource with the given unique name, arguments, and options.
func NewRoleMapper(ctx *pulumi.Context,
	name string, args *RoleMapperArgs, opts ...pulumi.ResourceOption) (*RoleMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LdapRolesDn == nil {
		return nil, errors.New("invalid value for required argument 'LdapRolesDn'")
	}
	if args.LdapUserFederationId == nil {
		return nil, errors.New("invalid value for required argument 'LdapUserFederationId'")
	}
	if args.MembershipLdapAttribute == nil {
		return nil, errors.New("invalid value for required argument 'MembershipLdapAttribute'")
	}
	if args.MembershipUserLdapAttribute == nil {
		return nil, errors.New("invalid value for required argument 'MembershipUserLdapAttribute'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.RoleNameLdapAttribute == nil {
		return nil, errors.New("invalid value for required argument 'RoleNameLdapAttribute'")
	}
	if args.RoleObjectClasses == nil {
		return nil, errors.New("invalid value for required argument 'RoleObjectClasses'")
	}
	var resource RoleMapper
	err := ctx.RegisterResource("keycloak:ldap/roleMapper:RoleMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleMapper gets an existing RoleMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleMapperState, opts ...pulumi.ResourceOption) (*RoleMapper, error) {
	var resource RoleMapper
	err := ctx.ReadResource("keycloak:ldap/roleMapper:RoleMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleMapper resources.
type roleMapperState struct {
	ClientId    *string `pulumi:"clientId"`
	LdapRolesDn *string `pulumi:"ldapRolesDn"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        *string `pulumi:"ldapUserFederationId"`
	MemberofLdapAttribute       *string `pulumi:"memberofLdapAttribute"`
	MembershipAttributeType     *string `pulumi:"membershipAttributeType"`
	MembershipLdapAttribute     *string `pulumi:"membershipLdapAttribute"`
	MembershipUserLdapAttribute *string `pulumi:"membershipUserLdapAttribute"`
	Mode                        *string `pulumi:"mode"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId                   *string  `pulumi:"realmId"`
	RoleNameLdapAttribute     *string  `pulumi:"roleNameLdapAttribute"`
	RoleObjectClasses         []string `pulumi:"roleObjectClasses"`
	RolesLdapFilter           *string  `pulumi:"rolesLdapFilter"`
	UseRealmRolesMapping      *bool    `pulumi:"useRealmRolesMapping"`
	UserRolesRetrieveStrategy *string  `pulumi:"userRolesRetrieveStrategy"`
}

type RoleMapperState struct {
	ClientId    pulumi.StringPtrInput
	LdapRolesDn pulumi.StringPtrInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        pulumi.StringPtrInput
	MemberofLdapAttribute       pulumi.StringPtrInput
	MembershipAttributeType     pulumi.StringPtrInput
	MembershipLdapAttribute     pulumi.StringPtrInput
	MembershipUserLdapAttribute pulumi.StringPtrInput
	Mode                        pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId                   pulumi.StringPtrInput
	RoleNameLdapAttribute     pulumi.StringPtrInput
	RoleObjectClasses         pulumi.StringArrayInput
	RolesLdapFilter           pulumi.StringPtrInput
	UseRealmRolesMapping      pulumi.BoolPtrInput
	UserRolesRetrieveStrategy pulumi.StringPtrInput
}

func (RoleMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleMapperState)(nil)).Elem()
}

type roleMapperArgs struct {
	ClientId    *string `pulumi:"clientId"`
	LdapRolesDn string  `pulumi:"ldapRolesDn"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        string  `pulumi:"ldapUserFederationId"`
	MemberofLdapAttribute       *string `pulumi:"memberofLdapAttribute"`
	MembershipAttributeType     *string `pulumi:"membershipAttributeType"`
	MembershipLdapAttribute     string  `pulumi:"membershipLdapAttribute"`
	MembershipUserLdapAttribute string  `pulumi:"membershipUserLdapAttribute"`
	Mode                        *string `pulumi:"mode"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId                   string   `pulumi:"realmId"`
	RoleNameLdapAttribute     string   `pulumi:"roleNameLdapAttribute"`
	RoleObjectClasses         []string `pulumi:"roleObjectClasses"`
	RolesLdapFilter           *string  `pulumi:"rolesLdapFilter"`
	UseRealmRolesMapping      *bool    `pulumi:"useRealmRolesMapping"`
	UserRolesRetrieveStrategy *string  `pulumi:"userRolesRetrieveStrategy"`
}

// The set of arguments for constructing a RoleMapper resource.
type RoleMapperArgs struct {
	ClientId    pulumi.StringPtrInput
	LdapRolesDn pulumi.StringInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        pulumi.StringInput
	MemberofLdapAttribute       pulumi.StringPtrInput
	MembershipAttributeType     pulumi.StringPtrInput
	MembershipLdapAttribute     pulumi.StringInput
	MembershipUserLdapAttribute pulumi.StringInput
	Mode                        pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId                   pulumi.StringInput
	RoleNameLdapAttribute     pulumi.StringInput
	RoleObjectClasses         pulumi.StringArrayInput
	RolesLdapFilter           pulumi.StringPtrInput
	UseRealmRolesMapping      pulumi.BoolPtrInput
	UserRolesRetrieveStrategy pulumi.StringPtrInput
}

func (RoleMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleMapperArgs)(nil)).Elem()
}

type RoleMapperInput interface {
	pulumi.Input

	ToRoleMapperOutput() RoleMapperOutput
	ToRoleMapperOutputWithContext(ctx context.Context) RoleMapperOutput
}

func (*RoleMapper) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleMapper)(nil))
}

func (i *RoleMapper) ToRoleMapperOutput() RoleMapperOutput {
	return i.ToRoleMapperOutputWithContext(context.Background())
}

func (i *RoleMapper) ToRoleMapperOutputWithContext(ctx context.Context) RoleMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapperOutput)
}

func (i *RoleMapper) ToRoleMapperPtrOutput() RoleMapperPtrOutput {
	return i.ToRoleMapperPtrOutputWithContext(context.Background())
}

func (i *RoleMapper) ToRoleMapperPtrOutputWithContext(ctx context.Context) RoleMapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapperPtrOutput)
}

type RoleMapperPtrInput interface {
	pulumi.Input

	ToRoleMapperPtrOutput() RoleMapperPtrOutput
	ToRoleMapperPtrOutputWithContext(ctx context.Context) RoleMapperPtrOutput
}

type roleMapperPtrType RoleMapperArgs

func (*roleMapperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleMapper)(nil))
}

func (i *roleMapperPtrType) ToRoleMapperPtrOutput() RoleMapperPtrOutput {
	return i.ToRoleMapperPtrOutputWithContext(context.Background())
}

func (i *roleMapperPtrType) ToRoleMapperPtrOutputWithContext(ctx context.Context) RoleMapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapperPtrOutput)
}

// RoleMapperArrayInput is an input type that accepts RoleMapperArray and RoleMapperArrayOutput values.
// You can construct a concrete instance of `RoleMapperArrayInput` via:
//
//          RoleMapperArray{ RoleMapperArgs{...} }
type RoleMapperArrayInput interface {
	pulumi.Input

	ToRoleMapperArrayOutput() RoleMapperArrayOutput
	ToRoleMapperArrayOutputWithContext(context.Context) RoleMapperArrayOutput
}

type RoleMapperArray []RoleMapperInput

func (RoleMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RoleMapper)(nil))
}

func (i RoleMapperArray) ToRoleMapperArrayOutput() RoleMapperArrayOutput {
	return i.ToRoleMapperArrayOutputWithContext(context.Background())
}

func (i RoleMapperArray) ToRoleMapperArrayOutputWithContext(ctx context.Context) RoleMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapperArrayOutput)
}

// RoleMapperMapInput is an input type that accepts RoleMapperMap and RoleMapperMapOutput values.
// You can construct a concrete instance of `RoleMapperMapInput` via:
//
//          RoleMapperMap{ "key": RoleMapperArgs{...} }
type RoleMapperMapInput interface {
	pulumi.Input

	ToRoleMapperMapOutput() RoleMapperMapOutput
	ToRoleMapperMapOutputWithContext(context.Context) RoleMapperMapOutput
}

type RoleMapperMap map[string]RoleMapperInput

func (RoleMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RoleMapper)(nil))
}

func (i RoleMapperMap) ToRoleMapperMapOutput() RoleMapperMapOutput {
	return i.ToRoleMapperMapOutputWithContext(context.Background())
}

func (i RoleMapperMap) ToRoleMapperMapOutputWithContext(ctx context.Context) RoleMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapperMapOutput)
}

type RoleMapperOutput struct {
	*pulumi.OutputState
}

func (RoleMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleMapper)(nil))
}

func (o RoleMapperOutput) ToRoleMapperOutput() RoleMapperOutput {
	return o
}

func (o RoleMapperOutput) ToRoleMapperOutputWithContext(ctx context.Context) RoleMapperOutput {
	return o
}

func (o RoleMapperOutput) ToRoleMapperPtrOutput() RoleMapperPtrOutput {
	return o.ToRoleMapperPtrOutputWithContext(context.Background())
}

func (o RoleMapperOutput) ToRoleMapperPtrOutputWithContext(ctx context.Context) RoleMapperPtrOutput {
	return o.ApplyT(func(v RoleMapper) *RoleMapper {
		return &v
	}).(RoleMapperPtrOutput)
}

type RoleMapperPtrOutput struct {
	*pulumi.OutputState
}

func (RoleMapperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleMapper)(nil))
}

func (o RoleMapperPtrOutput) ToRoleMapperPtrOutput() RoleMapperPtrOutput {
	return o
}

func (o RoleMapperPtrOutput) ToRoleMapperPtrOutputWithContext(ctx context.Context) RoleMapperPtrOutput {
	return o
}

type RoleMapperArrayOutput struct{ *pulumi.OutputState }

func (RoleMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleMapper)(nil))
}

func (o RoleMapperArrayOutput) ToRoleMapperArrayOutput() RoleMapperArrayOutput {
	return o
}

func (o RoleMapperArrayOutput) ToRoleMapperArrayOutputWithContext(ctx context.Context) RoleMapperArrayOutput {
	return o
}

func (o RoleMapperArrayOutput) Index(i pulumi.IntInput) RoleMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleMapper {
		return vs[0].([]RoleMapper)[vs[1].(int)]
	}).(RoleMapperOutput)
}

type RoleMapperMapOutput struct{ *pulumi.OutputState }

func (RoleMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RoleMapper)(nil))
}

func (o RoleMapperMapOutput) ToRoleMapperMapOutput() RoleMapperMapOutput {
	return o
}

func (o RoleMapperMapOutput) ToRoleMapperMapOutputWithContext(ctx context.Context) RoleMapperMapOutput {
	return o
}

func (o RoleMapperMapOutput) MapIndex(k pulumi.StringInput) RoleMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RoleMapper {
		return vs[0].(map[string]RoleMapper)[vs[1].(string)]
	}).(RoleMapperOutput)
}

func init() {
	pulumi.RegisterOutputType(RoleMapperOutput{})
	pulumi.RegisterOutputType(RoleMapperPtrOutput{})
	pulumi.RegisterOutputType(RoleMapperArrayOutput{})
	pulumi.RegisterOutputType(RoleMapperMapOutput{})
}
