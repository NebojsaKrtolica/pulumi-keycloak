// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type UserTemplateImporterIdentityProviderMapper struct {
	s *pulumi.ResourceState
}

// NewUserTemplateImporterIdentityProviderMapper registers a new resource with the given unique name, arguments, and options.
func NewUserTemplateImporterIdentityProviderMapper(ctx *pulumi.Context,
	name string, args *UserTemplateImporterIdentityProviderMapperArgs, opts ...pulumi.ResourceOpt) (*UserTemplateImporterIdentityProviderMapper, error) {
	if args == nil || args.IdentityProviderAlias == nil {
		return nil, errors.New("missing required argument 'IdentityProviderAlias'")
	}
	if args == nil || args.Realm == nil {
		return nil, errors.New("missing required argument 'Realm'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["identityProviderAlias"] = nil
		inputs["name"] = nil
		inputs["realm"] = nil
		inputs["template"] = nil
	} else {
		inputs["identityProviderAlias"] = args.IdentityProviderAlias
		inputs["name"] = args.Name
		inputs["realm"] = args.Realm
		inputs["template"] = args.Template
	}
	s, err := ctx.RegisterResource("keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserTemplateImporterIdentityProviderMapper{s: s}, nil
}

// GetUserTemplateImporterIdentityProviderMapper gets an existing UserTemplateImporterIdentityProviderMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserTemplateImporterIdentityProviderMapper(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserTemplateImporterIdentityProviderMapperState, opts ...pulumi.ResourceOpt) (*UserTemplateImporterIdentityProviderMapper, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["identityProviderAlias"] = state.IdentityProviderAlias
		inputs["name"] = state.Name
		inputs["realm"] = state.Realm
		inputs["template"] = state.Template
	}
	s, err := ctx.ReadResource("keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserTemplateImporterIdentityProviderMapper{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserTemplateImporterIdentityProviderMapper) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserTemplateImporterIdentityProviderMapper) ID() pulumi.IDOutput {
	return r.s.ID()
}

// IDP Alias
func (r *UserTemplateImporterIdentityProviderMapper) IdentityProviderAlias() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["identityProviderAlias"])
}

// IDP Mapper Name
func (r *UserTemplateImporterIdentityProviderMapper) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Realm Name
func (r *UserTemplateImporterIdentityProviderMapper) Realm() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realm"])
}

// Username For Template Import
func (r *UserTemplateImporterIdentityProviderMapper) Template() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["template"])
}

// Input properties used for looking up and filtering UserTemplateImporterIdentityProviderMapper resources.
type UserTemplateImporterIdentityProviderMapperState struct {
	// IDP Alias
	IdentityProviderAlias interface{}
	// IDP Mapper Name
	Name interface{}
	// Realm Name
	Realm interface{}
	// Username For Template Import
	Template interface{}
}

// The set of arguments for constructing a UserTemplateImporterIdentityProviderMapper resource.
type UserTemplateImporterIdentityProviderMapperArgs struct {
	// IDP Alias
	IdentityProviderAlias interface{}
	// IDP Mapper Name
	Name interface{}
	// Realm Name
	Realm interface{}
	// Username For Template Import
	Template interface{}
}
