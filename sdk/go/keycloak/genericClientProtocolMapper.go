// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # .GenericClientProtocolMapper
// 
// Allows for creating and managing protocol mapper for both types of clients (openid-connect and saml) within Keycloak.
// 
// There are two uses cases for using this resource:
// * If you implemented a custom protocol mapper, this resource can be used to configure it
// * If the provider doesn't support a particular protocol mapper, this resource can be used instead.
// 
// Due to the generic nature of this mapper, it is less user-friendly and more prone to configuration errors. 
// Therefore, if possible, a specific mapper should be used.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm this protocol mapper exists within.
// - `clientId` - (Required) The client this protocol mapper is attached to.
// - `name` - (Required) The display name of this protocol mapper in the GUI.
// - `protocol` - (Required) The type of client (either `openid-connect` or `saml`). The type must match the type of the client.
// - `protocolMapper` - (Required) The name of the protocol mapper. The protocol mapper must be
//    compatible with the specified client.
// - `config` - (Required) A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/generic_client_protocol_mapper.html.markdown.
type GenericClientProtocolMapper struct {
	s *pulumi.ResourceState
}

// NewGenericClientProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewGenericClientProtocolMapper(ctx *pulumi.Context,
	name string, args *GenericClientProtocolMapperArgs, opts ...pulumi.ResourceOpt) (*GenericClientProtocolMapper, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.Config == nil {
		return nil, errors.New("missing required argument 'Config'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.ProtocolMapper == nil {
		return nil, errors.New("missing required argument 'ProtocolMapper'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientId"] = nil
		inputs["config"] = nil
		inputs["name"] = nil
		inputs["protocol"] = nil
		inputs["protocolMapper"] = nil
		inputs["realmId"] = nil
	} else {
		inputs["clientId"] = args.ClientId
		inputs["config"] = args.Config
		inputs["name"] = args.Name
		inputs["protocol"] = args.Protocol
		inputs["protocolMapper"] = args.ProtocolMapper
		inputs["realmId"] = args.RealmId
	}
	s, err := ctx.RegisterResource("keycloak:index/genericClientProtocolMapper:GenericClientProtocolMapper", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GenericClientProtocolMapper{s: s}, nil
}

// GetGenericClientProtocolMapper gets an existing GenericClientProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenericClientProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GenericClientProtocolMapperState, opts ...pulumi.ResourceOpt) (*GenericClientProtocolMapper, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientId"] = state.ClientId
		inputs["config"] = state.Config
		inputs["name"] = state.Name
		inputs["protocol"] = state.Protocol
		inputs["protocolMapper"] = state.ProtocolMapper
		inputs["realmId"] = state.RealmId
	}
	s, err := ctx.ReadResource("keycloak:index/genericClientProtocolMapper:GenericClientProtocolMapper", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GenericClientProtocolMapper{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GenericClientProtocolMapper) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GenericClientProtocolMapper) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The mapper's associated client.
func (r *GenericClientProtocolMapper) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

func (r *GenericClientProtocolMapper) Config() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["config"])
}

// A human-friendly name that will appear in the Keycloak console.
func (r *GenericClientProtocolMapper) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The protocol of the client (openid-connect / saml).
func (r *GenericClientProtocolMapper) Protocol() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["protocol"])
}

// The type of the protocol mapper.
func (r *GenericClientProtocolMapper) ProtocolMapper() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["protocolMapper"])
}

// The realm id where the associated client exists.
func (r *GenericClientProtocolMapper) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// Input properties used for looking up and filtering GenericClientProtocolMapper resources.
type GenericClientProtocolMapperState struct {
	// The mapper's associated client.
	ClientId interface{}
	Config interface{}
	// A human-friendly name that will appear in the Keycloak console.
	Name interface{}
	// The protocol of the client (openid-connect / saml).
	Protocol interface{}
	// The type of the protocol mapper.
	ProtocolMapper interface{}
	// The realm id where the associated client exists.
	RealmId interface{}
}

// The set of arguments for constructing a GenericClientProtocolMapper resource.
type GenericClientProtocolMapperArgs struct {
	// The mapper's associated client.
	ClientId interface{}
	Config interface{}
	// A human-friendly name that will appear in the Keycloak console.
	Name interface{}
	// The protocol of the client (openid-connect / saml).
	Protocol interface{}
	// The type of the protocol mapper.
	ProtocolMapper interface{}
	// The realm id where the associated client exists.
	RealmId interface{}
}
