// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oidc

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # oidc.IdentityProvider
//
// Allows to create and manage OIDC Identity Providers within Keycloak.
//
// OIDC (OpenID Connect) identity providers allows to authenticate through a third-party system, using OIDC standard.
//
// ### Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v2/go/keycloak/oidc"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := keycloak.NewRealm(ctx, "my_realm", &keycloak.RealmArgs{
// 			DisplayName: pulumi.String("my-realm"),
// 			Enabled:     pulumi.Bool(true),
// 			Realm:       pulumi.String("my-realm"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = oidc.NewIdentityProvider(ctx, "realmIdentityProvider", &oidc.IdentityProviderArgs{
// 			Alias:            pulumi.String("my-idp"),
// 			AuthorizationUrl: pulumi.String("https://authorizationurl.com"),
// 			ClientId:         pulumi.String("clientID"),
// 			ClientSecret:     pulumi.String("clientSecret"),
// 			ExtraConfig: pulumi.StringMap{
// 				"clientAuthMethod": pulumi.String("client_secret_post"),
// 			},
// 			Realm:    pulumi.String("my-realm"),
// 			TokenUrl: pulumi.String("https://tokenurl.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realm` - (Required) The name of the realm. This is unique across Keycloak.
// - `alias` - (Required) The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
// - `authorizationUrl` - (Required) The Authorization Url.
// - `clientId` - (Required) The client or client identifier registered within the identity provider.
// - `clientSecret` - (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
// - `tokenUrl` - (Required) The Token URL.
// - `extraConfig` - (Optional) this block is needed to set extra configuration (Not yet supported variables or custom extensions)
//     - `clientAuthMethod` (Optional) The client authentication method. Since Keycloak 8, this is a required attribute if OIDC provider is created over the Keycloak Userinterface.
//         It accepts the values `clientSecretPost` (Client secret sent as post), `clientSecretBasic` (Client secret sent as basic auth), `clientSecretJwt` (Client secret as jwt) and ` privateKeyJwt  ` (JTW signed with private key)
// - `providerId` - (Optional) The Provider id, defaults to `oidc`, unless you have a custom implementation.
// - `backchannelSupported` - (Optional) Does the external IDP support backchannel logout ? Defaults to `true`.
// - `validateSignature` - (Optional) Enable/disable signature validation of external IDP signatures. Defaults to `false`.
// - `userInfoUrl` - (Optional) User Info URL.
// - `jwksUrl` - (Optional) JSON Web Key Set URL.
// - `hideOnLoginPage` - (Optional) Hide On Login Page. Defaults to `false`.
// - `logoutUrl` - (Optional) The Logout URL is the end session endpoint to use to logout user from external identity provider.
// - `loginHint` - (Optional) Pass login hint to identity provider.
// - `uiLocales` - (Optional) Pass current locale to identity provider. Defaults to `false`.
// - `acceptsPromptNoneForwardFromClient` (Optional) Specifies whether the IDP accepts forwarded authentication requests that contain the prompt=none query parameter or not
// - `defaultScopes` - (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
type IdentityProvider struct {
	pulumi.CustomResourceState

	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient pulumi.BoolPtrOutput `pulumi:"acceptsPromptNoneForwardFromClient"`
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate pulumi.BoolPtrOutput `pulumi:"addReadTokenRoleOnCreate"`
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrOutput `pulumi:"authenticateByDefault"`
	// OIDC authorization URL.
	AuthorizationUrl pulumi.StringOutput `pulumi:"authorizationUrl"`
	// Does the external IDP support backchannel logout?
	BackchannelSupported pulumi.BoolPtrOutput `pulumi:"backchannelSupported"`
	// Client ID.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client Secret.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
	DefaultScopes pulumi.StringPtrOutput `pulumi:"defaultScopes"`
	// Friendly name for Identity Providers.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Enable/disable this identity provider.
	Enabled     pulumi.BoolPtrOutput `pulumi:"enabled"`
	ExtraConfig pulumi.MapOutput     `pulumi:"extraConfig"`
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias pulumi.StringPtrOutput `pulumi:"firstBrokerLoginFlowAlias"`
	// Hide On Login Page.
	HideOnLoginPage pulumi.BoolPtrOutput `pulumi:"hideOnLoginPage"`
	// Internal Identity Provider Id
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// JSON Web Key Set URL
	JwksUrl pulumi.StringPtrOutput `pulumi:"jwksUrl"`
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly pulumi.BoolPtrOutput `pulumi:"linkOnly"`
	// Login Hint.
	LoginHint pulumi.StringPtrOutput `pulumi:"loginHint"`
	// Logout URL
	LogoutUrl pulumi.StringPtrOutput `pulumi:"logoutUrl"`
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias pulumi.StringPtrOutput `pulumi:"postBrokerLoginFlowAlias"`
	// provider id, is always oidc, unless you have a custom implementation
	ProviderId pulumi.StringPtrOutput `pulumi:"providerId"`
	// Realm Name
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken pulumi.BoolPtrOutput `pulumi:"storeToken"`
	// Token URL.
	TokenUrl pulumi.StringOutput `pulumi:"tokenUrl"`
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail pulumi.BoolPtrOutput `pulumi:"trustEmail"`
	// Pass current locale to identity provider
	UiLocales pulumi.BoolPtrOutput `pulumi:"uiLocales"`
	// User Info URL
	UserInfoUrl pulumi.StringPtrOutput `pulumi:"userInfoUrl"`
	// Enable/disable signature validation of external IDP signatures.
	ValidateSignature pulumi.BoolPtrOutput `pulumi:"validateSignature"`
}

// NewIdentityProvider registers a new resource with the given unique name, arguments, and options.
func NewIdentityProvider(ctx *pulumi.Context,
	name string, args *IdentityProviderArgs, opts ...pulumi.ResourceOption) (*IdentityProvider, error) {
	if args == nil || args.Alias == nil {
		return nil, errors.New("missing required argument 'Alias'")
	}
	if args == nil || args.AuthorizationUrl == nil {
		return nil, errors.New("missing required argument 'AuthorizationUrl'")
	}
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil || args.Realm == nil {
		return nil, errors.New("missing required argument 'Realm'")
	}
	if args == nil || args.TokenUrl == nil {
		return nil, errors.New("missing required argument 'TokenUrl'")
	}
	if args == nil {
		args = &IdentityProviderArgs{}
	}
	var resource IdentityProvider
	err := ctx.RegisterResource("keycloak:oidc/identityProvider:IdentityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProvider gets an existing IdentityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderState, opts ...pulumi.ResourceOption) (*IdentityProvider, error) {
	var resource IdentityProvider
	err := ctx.ReadResource("keycloak:oidc/identityProvider:IdentityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProvider resources.
type identityProviderState struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient *bool `pulumi:"acceptsPromptNoneForwardFromClient"`
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate *bool `pulumi:"addReadTokenRoleOnCreate"`
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
	Alias *string `pulumi:"alias"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `pulumi:"authenticateByDefault"`
	// OIDC authorization URL.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// Does the external IDP support backchannel logout?
	BackchannelSupported *bool `pulumi:"backchannelSupported"`
	// Client ID.
	ClientId *string `pulumi:"clientId"`
	// Client Secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
	DefaultScopes *string `pulumi:"defaultScopes"`
	// Friendly name for Identity Providers.
	DisplayName *string `pulumi:"displayName"`
	// Enable/disable this identity provider.
	Enabled     *bool                  `pulumi:"enabled"`
	ExtraConfig map[string]interface{} `pulumi:"extraConfig"`
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias *string `pulumi:"firstBrokerLoginFlowAlias"`
	// Hide On Login Page.
	HideOnLoginPage *bool `pulumi:"hideOnLoginPage"`
	// Internal Identity Provider Id
	InternalId *string `pulumi:"internalId"`
	// JSON Web Key Set URL
	JwksUrl *string `pulumi:"jwksUrl"`
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly *bool `pulumi:"linkOnly"`
	// Login Hint.
	LoginHint *string `pulumi:"loginHint"`
	// Logout URL
	LogoutUrl *string `pulumi:"logoutUrl"`
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias *string `pulumi:"postBrokerLoginFlowAlias"`
	// provider id, is always oidc, unless you have a custom implementation
	ProviderId *string `pulumi:"providerId"`
	// Realm Name
	Realm *string `pulumi:"realm"`
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken *bool `pulumi:"storeToken"`
	// Token URL.
	TokenUrl *string `pulumi:"tokenUrl"`
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail *bool `pulumi:"trustEmail"`
	// Pass current locale to identity provider
	UiLocales *bool `pulumi:"uiLocales"`
	// User Info URL
	UserInfoUrl *string `pulumi:"userInfoUrl"`
	// Enable/disable signature validation of external IDP signatures.
	ValidateSignature *bool `pulumi:"validateSignature"`
}

type IdentityProviderState struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient pulumi.BoolPtrInput
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate pulumi.BoolPtrInput
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
	Alias pulumi.StringPtrInput
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrInput
	// OIDC authorization URL.
	AuthorizationUrl pulumi.StringPtrInput
	// Does the external IDP support backchannel logout?
	BackchannelSupported pulumi.BoolPtrInput
	// Client ID.
	ClientId pulumi.StringPtrInput
	// Client Secret.
	ClientSecret pulumi.StringPtrInput
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
	DefaultScopes pulumi.StringPtrInput
	// Friendly name for Identity Providers.
	DisplayName pulumi.StringPtrInput
	// Enable/disable this identity provider.
	Enabled     pulumi.BoolPtrInput
	ExtraConfig pulumi.MapInput
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias pulumi.StringPtrInput
	// Hide On Login Page.
	HideOnLoginPage pulumi.BoolPtrInput
	// Internal Identity Provider Id
	InternalId pulumi.StringPtrInput
	// JSON Web Key Set URL
	JwksUrl pulumi.StringPtrInput
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly pulumi.BoolPtrInput
	// Login Hint.
	LoginHint pulumi.StringPtrInput
	// Logout URL
	LogoutUrl pulumi.StringPtrInput
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias pulumi.StringPtrInput
	// provider id, is always oidc, unless you have a custom implementation
	ProviderId pulumi.StringPtrInput
	// Realm Name
	Realm pulumi.StringPtrInput
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken pulumi.BoolPtrInput
	// Token URL.
	TokenUrl pulumi.StringPtrInput
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail pulumi.BoolPtrInput
	// Pass current locale to identity provider
	UiLocales pulumi.BoolPtrInput
	// User Info URL
	UserInfoUrl pulumi.StringPtrInput
	// Enable/disable signature validation of external IDP signatures.
	ValidateSignature pulumi.BoolPtrInput
}

func (IdentityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderState)(nil)).Elem()
}

type identityProviderArgs struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient *bool `pulumi:"acceptsPromptNoneForwardFromClient"`
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate *bool `pulumi:"addReadTokenRoleOnCreate"`
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
	Alias string `pulumi:"alias"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `pulumi:"authenticateByDefault"`
	// OIDC authorization URL.
	AuthorizationUrl string `pulumi:"authorizationUrl"`
	// Does the external IDP support backchannel logout?
	BackchannelSupported *bool `pulumi:"backchannelSupported"`
	// Client ID.
	ClientId string `pulumi:"clientId"`
	// Client Secret.
	ClientSecret string `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
	DefaultScopes *string `pulumi:"defaultScopes"`
	// Friendly name for Identity Providers.
	DisplayName *string `pulumi:"displayName"`
	// Enable/disable this identity provider.
	Enabled     *bool                  `pulumi:"enabled"`
	ExtraConfig map[string]interface{} `pulumi:"extraConfig"`
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias *string `pulumi:"firstBrokerLoginFlowAlias"`
	// Hide On Login Page.
	HideOnLoginPage *bool `pulumi:"hideOnLoginPage"`
	// JSON Web Key Set URL
	JwksUrl *string `pulumi:"jwksUrl"`
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly *bool `pulumi:"linkOnly"`
	// Login Hint.
	LoginHint *string `pulumi:"loginHint"`
	// Logout URL
	LogoutUrl *string `pulumi:"logoutUrl"`
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias *string `pulumi:"postBrokerLoginFlowAlias"`
	// provider id, is always oidc, unless you have a custom implementation
	ProviderId *string `pulumi:"providerId"`
	// Realm Name
	Realm string `pulumi:"realm"`
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken *bool `pulumi:"storeToken"`
	// Token URL.
	TokenUrl string `pulumi:"tokenUrl"`
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail *bool `pulumi:"trustEmail"`
	// Pass current locale to identity provider
	UiLocales *bool `pulumi:"uiLocales"`
	// User Info URL
	UserInfoUrl *string `pulumi:"userInfoUrl"`
	// Enable/disable signature validation of external IDP signatures.
	ValidateSignature *bool `pulumi:"validateSignature"`
}

// The set of arguments for constructing a IdentityProvider resource.
type IdentityProviderArgs struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient pulumi.BoolPtrInput
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate pulumi.BoolPtrInput
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
	Alias pulumi.StringInput
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrInput
	// OIDC authorization URL.
	AuthorizationUrl pulumi.StringInput
	// Does the external IDP support backchannel logout?
	BackchannelSupported pulumi.BoolPtrInput
	// Client ID.
	ClientId pulumi.StringInput
	// Client Secret.
	ClientSecret pulumi.StringInput
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
	DefaultScopes pulumi.StringPtrInput
	// Friendly name for Identity Providers.
	DisplayName pulumi.StringPtrInput
	// Enable/disable this identity provider.
	Enabled     pulumi.BoolPtrInput
	ExtraConfig pulumi.MapInput
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias pulumi.StringPtrInput
	// Hide On Login Page.
	HideOnLoginPage pulumi.BoolPtrInput
	// JSON Web Key Set URL
	JwksUrl pulumi.StringPtrInput
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly pulumi.BoolPtrInput
	// Login Hint.
	LoginHint pulumi.StringPtrInput
	// Logout URL
	LogoutUrl pulumi.StringPtrInput
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias pulumi.StringPtrInput
	// provider id, is always oidc, unless you have a custom implementation
	ProviderId pulumi.StringPtrInput
	// Realm Name
	Realm pulumi.StringInput
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken pulumi.BoolPtrInput
	// Token URL.
	TokenUrl pulumi.StringInput
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail pulumi.BoolPtrInput
	// Pass current locale to identity provider
	UiLocales pulumi.BoolPtrInput
	// User Info URL
	UserInfoUrl pulumi.StringPtrInput
	// Enable/disable signature validation of external IDP signatures.
	ValidateSignature pulumi.BoolPtrInput
}

func (IdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderArgs)(nil)).Elem()
}
