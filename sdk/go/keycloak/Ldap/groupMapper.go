// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package Ldap

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type GroupMapper struct {
	s *pulumi.ResourceState
}

// NewGroupMapper registers a new resource with the given unique name, arguments, and options.
func NewGroupMapper(ctx *pulumi.Context,
	name string, args *GroupMapperArgs, opts ...pulumi.ResourceOpt) (*GroupMapper, error) {
	if args == nil || args.GroupNameLdapAttribute == nil {
		return nil, errors.New("missing required argument 'GroupNameLdapAttribute'")
	}
	if args == nil || args.GroupObjectClasses == nil {
		return nil, errors.New("missing required argument 'GroupObjectClasses'")
	}
	if args == nil || args.LdapGroupsDn == nil {
		return nil, errors.New("missing required argument 'LdapGroupsDn'")
	}
	if args == nil || args.LdapUserFederationId == nil {
		return nil, errors.New("missing required argument 'LdapUserFederationId'")
	}
	if args == nil || args.MembershipLdapAttribute == nil {
		return nil, errors.New("missing required argument 'MembershipLdapAttribute'")
	}
	if args == nil || args.MembershipUserLdapAttribute == nil {
		return nil, errors.New("missing required argument 'MembershipUserLdapAttribute'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dropNonExistingGroupsDuringSync"] = nil
		inputs["groupNameLdapAttribute"] = nil
		inputs["groupObjectClasses"] = nil
		inputs["groupsLdapFilter"] = nil
		inputs["ignoreMissingGroups"] = nil
		inputs["ldapGroupsDn"] = nil
		inputs["ldapUserFederationId"] = nil
		inputs["mappedGroupAttributes"] = nil
		inputs["memberofLdapAttribute"] = nil
		inputs["membershipAttributeType"] = nil
		inputs["membershipLdapAttribute"] = nil
		inputs["membershipUserLdapAttribute"] = nil
		inputs["mode"] = nil
		inputs["name"] = nil
		inputs["preserveGroupInheritance"] = nil
		inputs["realmId"] = nil
		inputs["userRolesRetrieveStrategy"] = nil
	} else {
		inputs["dropNonExistingGroupsDuringSync"] = args.DropNonExistingGroupsDuringSync
		inputs["groupNameLdapAttribute"] = args.GroupNameLdapAttribute
		inputs["groupObjectClasses"] = args.GroupObjectClasses
		inputs["groupsLdapFilter"] = args.GroupsLdapFilter
		inputs["ignoreMissingGroups"] = args.IgnoreMissingGroups
		inputs["ldapGroupsDn"] = args.LdapGroupsDn
		inputs["ldapUserFederationId"] = args.LdapUserFederationId
		inputs["mappedGroupAttributes"] = args.MappedGroupAttributes
		inputs["memberofLdapAttribute"] = args.MemberofLdapAttribute
		inputs["membershipAttributeType"] = args.MembershipAttributeType
		inputs["membershipLdapAttribute"] = args.MembershipLdapAttribute
		inputs["membershipUserLdapAttribute"] = args.MembershipUserLdapAttribute
		inputs["mode"] = args.Mode
		inputs["name"] = args.Name
		inputs["preserveGroupInheritance"] = args.PreserveGroupInheritance
		inputs["realmId"] = args.RealmId
		inputs["userRolesRetrieveStrategy"] = args.UserRolesRetrieveStrategy
	}
	s, err := ctx.RegisterResource("keycloak:Ldap/groupMapper:GroupMapper", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupMapper{s: s}, nil
}

// GetGroupMapper gets an existing GroupMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMapper(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupMapperState, opts ...pulumi.ResourceOpt) (*GroupMapper, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dropNonExistingGroupsDuringSync"] = state.DropNonExistingGroupsDuringSync
		inputs["groupNameLdapAttribute"] = state.GroupNameLdapAttribute
		inputs["groupObjectClasses"] = state.GroupObjectClasses
		inputs["groupsLdapFilter"] = state.GroupsLdapFilter
		inputs["ignoreMissingGroups"] = state.IgnoreMissingGroups
		inputs["ldapGroupsDn"] = state.LdapGroupsDn
		inputs["ldapUserFederationId"] = state.LdapUserFederationId
		inputs["mappedGroupAttributes"] = state.MappedGroupAttributes
		inputs["memberofLdapAttribute"] = state.MemberofLdapAttribute
		inputs["membershipAttributeType"] = state.MembershipAttributeType
		inputs["membershipLdapAttribute"] = state.MembershipLdapAttribute
		inputs["membershipUserLdapAttribute"] = state.MembershipUserLdapAttribute
		inputs["mode"] = state.Mode
		inputs["name"] = state.Name
		inputs["preserveGroupInheritance"] = state.PreserveGroupInheritance
		inputs["realmId"] = state.RealmId
		inputs["userRolesRetrieveStrategy"] = state.UserRolesRetrieveStrategy
	}
	s, err := ctx.ReadResource("keycloak:Ldap/groupMapper:GroupMapper", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GroupMapper{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GroupMapper) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GroupMapper) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *GroupMapper) DropNonExistingGroupsDuringSync() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["dropNonExistingGroupsDuringSync"])
}

func (r *GroupMapper) GroupNameLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupNameLdapAttribute"])
}

func (r *GroupMapper) GroupObjectClasses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groupObjectClasses"])
}

func (r *GroupMapper) GroupsLdapFilter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupsLdapFilter"])
}

func (r *GroupMapper) IgnoreMissingGroups() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["ignoreMissingGroups"])
}

func (r *GroupMapper) LdapGroupsDn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ldapGroupsDn"])
}

// The ldap user federation provider to attach this mapper to.
func (r *GroupMapper) LdapUserFederationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ldapUserFederationId"])
}

func (r *GroupMapper) MappedGroupAttributes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["mappedGroupAttributes"])
}

func (r *GroupMapper) MemberofLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["memberofLdapAttribute"])
}

func (r *GroupMapper) MembershipAttributeType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["membershipAttributeType"])
}

func (r *GroupMapper) MembershipLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["membershipLdapAttribute"])
}

func (r *GroupMapper) MembershipUserLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["membershipUserLdapAttribute"])
}

func (r *GroupMapper) Mode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["mode"])
}

// Display name of the mapper when displayed in the console.
func (r *GroupMapper) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *GroupMapper) PreserveGroupInheritance() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["preserveGroupInheritance"])
}

// The realm in which the ldap user federation provider exists.
func (r *GroupMapper) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

func (r *GroupMapper) UserRolesRetrieveStrategy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userRolesRetrieveStrategy"])
}

// Input properties used for looking up and filtering GroupMapper resources.
type GroupMapperState struct {
	DropNonExistingGroupsDuringSync interface{}
	GroupNameLdapAttribute interface{}
	GroupObjectClasses interface{}
	GroupsLdapFilter interface{}
	IgnoreMissingGroups interface{}
	LdapGroupsDn interface{}
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId interface{}
	MappedGroupAttributes interface{}
	MemberofLdapAttribute interface{}
	MembershipAttributeType interface{}
	MembershipLdapAttribute interface{}
	MembershipUserLdapAttribute interface{}
	Mode interface{}
	// Display name of the mapper when displayed in the console.
	Name interface{}
	PreserveGroupInheritance interface{}
	// The realm in which the ldap user federation provider exists.
	RealmId interface{}
	UserRolesRetrieveStrategy interface{}
}

// The set of arguments for constructing a GroupMapper resource.
type GroupMapperArgs struct {
	DropNonExistingGroupsDuringSync interface{}
	GroupNameLdapAttribute interface{}
	GroupObjectClasses interface{}
	GroupsLdapFilter interface{}
	IgnoreMissingGroups interface{}
	LdapGroupsDn interface{}
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId interface{}
	MappedGroupAttributes interface{}
	MemberofLdapAttribute interface{}
	MembershipAttributeType interface{}
	MembershipLdapAttribute interface{}
	MembershipUserLdapAttribute interface{}
	Mode interface{}
	// Display name of the mapper when displayed in the console.
	Name interface{}
	PreserveGroupInheritance interface{}
	// The realm in which the ldap user federation provider exists.
	RealmId interface{}
	UserRolesRetrieveStrategy interface{}
}
