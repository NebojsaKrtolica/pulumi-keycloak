// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package Ldap

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # Ldap.UserAttributeMapper
// 
// Allows for creating and managing user attribute mappers for Keycloak users
// federated via LDAP.
// 
// The LDAP user attribute mapper can be used to map a single LDAP attribute
// to an attribute on the Keycloak user model.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm that this LDAP mapper will exist in.
// - `ldapUserFederationId` - (Required) The ID of the LDAP user federation provider to attach this mapper to.
// - `name` - (Required) Display name of this mapper when displayed in the console.
// - `userModelAttribute` - (Required) Name of the user property or attribute you want to map the LDAP attribute into.
// - `ldapAttribute` - (Required) Name of the mapped attribute on the LDAP object.
// - `readOnly` - (Optional) When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
// - `alwaysReadValueFromLdap` - (Optional) When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
// - `isMandatoryInLdap` - (Optional) When `true`, this attribute must exist in LDAP. Defaults to `false`.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/ldap_user_attribute_mapper.html.markdown.
type UserAttributeMapper struct {
	s *pulumi.ResourceState
}

// NewUserAttributeMapper registers a new resource with the given unique name, arguments, and options.
func NewUserAttributeMapper(ctx *pulumi.Context,
	name string, args *UserAttributeMapperArgs, opts ...pulumi.ResourceOpt) (*UserAttributeMapper, error) {
	if args == nil || args.LdapAttribute == nil {
		return nil, errors.New("missing required argument 'LdapAttribute'")
	}
	if args == nil || args.LdapUserFederationId == nil {
		return nil, errors.New("missing required argument 'LdapUserFederationId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.UserModelAttribute == nil {
		return nil, errors.New("missing required argument 'UserModelAttribute'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alwaysReadValueFromLdap"] = nil
		inputs["isMandatoryInLdap"] = nil
		inputs["ldapAttribute"] = nil
		inputs["ldapUserFederationId"] = nil
		inputs["name"] = nil
		inputs["readOnly"] = nil
		inputs["realmId"] = nil
		inputs["userModelAttribute"] = nil
	} else {
		inputs["alwaysReadValueFromLdap"] = args.AlwaysReadValueFromLdap
		inputs["isMandatoryInLdap"] = args.IsMandatoryInLdap
		inputs["ldapAttribute"] = args.LdapAttribute
		inputs["ldapUserFederationId"] = args.LdapUserFederationId
		inputs["name"] = args.Name
		inputs["readOnly"] = args.ReadOnly
		inputs["realmId"] = args.RealmId
		inputs["userModelAttribute"] = args.UserModelAttribute
	}
	s, err := ctx.RegisterResource("keycloak:Ldap/userAttributeMapper:UserAttributeMapper", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserAttributeMapper{s: s}, nil
}

// GetUserAttributeMapper gets an existing UserAttributeMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAttributeMapper(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserAttributeMapperState, opts ...pulumi.ResourceOpt) (*UserAttributeMapper, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alwaysReadValueFromLdap"] = state.AlwaysReadValueFromLdap
		inputs["isMandatoryInLdap"] = state.IsMandatoryInLdap
		inputs["ldapAttribute"] = state.LdapAttribute
		inputs["ldapUserFederationId"] = state.LdapUserFederationId
		inputs["name"] = state.Name
		inputs["readOnly"] = state.ReadOnly
		inputs["realmId"] = state.RealmId
		inputs["userModelAttribute"] = state.UserModelAttribute
	}
	s, err := ctx.ReadResource("keycloak:Ldap/userAttributeMapper:UserAttributeMapper", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserAttributeMapper{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserAttributeMapper) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserAttributeMapper) ID() pulumi.IDOutput {
	return r.s.ID()
}

// When true, the value fetched from LDAP will override the value stored in Keycloak.
func (r *UserAttributeMapper) AlwaysReadValueFromLdap() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["alwaysReadValueFromLdap"])
}

// When true, this attribute must exist in LDAP.
func (r *UserAttributeMapper) IsMandatoryInLdap() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isMandatoryInLdap"])
}

// Name of the mapped attribute on LDAP object.
func (r *UserAttributeMapper) LdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ldapAttribute"])
}

// The ldap user federation provider to attach this mapper to.
func (r *UserAttributeMapper) LdapUserFederationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ldapUserFederationId"])
}

// Display name of the mapper when displayed in the console.
func (r *UserAttributeMapper) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
func (r *UserAttributeMapper) ReadOnly() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["readOnly"])
}

// The realm in which the ldap user federation provider exists.
func (r *UserAttributeMapper) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// Name of the UserModel property or attribute you want to map the LDAP attribute into.
func (r *UserAttributeMapper) UserModelAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userModelAttribute"])
}

// Input properties used for looking up and filtering UserAttributeMapper resources.
type UserAttributeMapperState struct {
	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap interface{}
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap interface{}
	// Name of the mapped attribute on LDAP object.
	LdapAttribute interface{}
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId interface{}
	// Display name of the mapper when displayed in the console.
	Name interface{}
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly interface{}
	// The realm in which the ldap user federation provider exists.
	RealmId interface{}
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute interface{}
}

// The set of arguments for constructing a UserAttributeMapper resource.
type UserAttributeMapperArgs struct {
	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap interface{}
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap interface{}
	// Name of the mapped attribute on LDAP object.
	LdapAttribute interface{}
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId interface{}
	// Display name of the mapper when displayed in the console.
	Name interface{}
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly interface{}
	// The realm in which the ldap user federation provider exists.
	RealmId interface{}
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute interface{}
}
