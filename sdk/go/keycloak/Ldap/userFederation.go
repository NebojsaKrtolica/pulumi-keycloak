// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package Ldap

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// ## # Ldap.UserFederation
// 
// Allows for creating and managing LDAP user federation providers within Keycloak.
// 
// Keycloak can use an LDAP user federation provider to federate users to Keycloak
// from a directory system such as LDAP or Active Directory. Federated users
// will exist within the realm and will be able to log in to clients. Federated
// users can have their attributes defined using mappers.
// 
// ### Argument Reference
// 
// The following arguments are supported:
// 
// - `realmId` - (Required) The realm that this provider will provide user federation for.
// - `name` - (Required) Display name of the provider when displayed in the console.
// - `enabled` - (Optional) When `false`, this provider will not be used when performing queries for users. Defaults to `true`.
// - `priority` - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to `0`.
// - `importEnabled` - (Optional) When `true`, LDAP users will be imported into the Keycloak database. Defaults to `true`.
// - `editMode` - (Optional) Can be one of `READ_ONLY`, `WRITABLE`, or `UNSYNCED`. `UNSYNCED` allows user data to be imported but not synced back to LDAP. Defaults to `READ_ONLY`.
// - `syncRegistrations` - (Optional) When `true`, newly created users will be synced back to LDAP. Defaults to `false`.
// - `vendor` - (Optional) Can be one of `OTHER`, `EDIRECTORY`, `AD`, `RHDS`, or `TIVOLI`. When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to `OPTIONAL`.
// - `usernameLdapAttribute` - (Required) Name of the LDAP attribute to use as the Keycloak username.
// - `rdnLdapAttribute` - (Required) Name of the LDAP attribute to use as the relative distinguished name.
// - `uuidLdapAttribute` - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
// - `userObjectClasses` - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one.
// - `connectionUrl` - (Required) Connection URL to the LDAP server.
// - `usersDn` - (Required) Full DN of LDAP tree where your users are.
// - `bindDn` - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if `bindCredential` is set.
// - `bindCredential` - (Optional) Password of LDAP admin. This attribute must be set if `bindDn` is set.
// - `customUserSearchFilter` - (Optional) Additional LDAP filter for filtering searched users. Must begin with `(` and end with `)`.
// - `searchScope` - (Optional) Can be one of `ONE_LEVEL` or `SUBTREE`:
//     - `ONE_LEVEL`: Only search for users in the DN specified by `userDn`.
//     - `SUBTREE`: Search entire LDAP subtree.
// - `validatePasswordPolicy` - (Optional) When `true`, Keycloak will validate passwords using the realm policy before updating it.
// - `useTruststoreSpi` - (Optional) Can be one of `ALWAYS`, `ONLY_FOR_LDAPS`, or `NEVER`:
//     - `ALWAYS` - Always use the truststore SPI for LDAP connections.
//     - `NEVER` - Never use the truststore SPI for LDAP connections.
//     - `ONLY_FOR_LDAPS` - Only use the truststore SPI if your LDAP connection uses the ldaps protocol.
// - `connectionTimeout` - (Optional) LDAP connection timeout in the format of a [Go duration string](https://golang.org/pkg/time/#Duration.String).
// - `readTimeout` - (Optional) LDAP read timeout in the format of a [Go duration string](https://golang.org/pkg/time/#Duration.String).
// - `pagination` - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to `true`.
// - `batchSizeForSync` - (Optional) The number of users to sync within a single transaction. Defaults to `1000`.
// - `fullSyncPeriod` - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
// - `changedSyncPeriod` - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync.
// - `cachePolicy` - (Optional) Can be one of `DEFAULT`, `EVICT_DAILY`, `EVICT_WEEKLY`, `MAX_LIFESPAN`, or `NO_CACHE`. Defaults to `DEFAULT`.
//
// > This content is derived from https://github.com/mrparkers/terraform-provider-keycloak/blob/master/website/docs/r/ldap_user_federation.html.markdown.
type UserFederation struct {
	s *pulumi.ResourceState
}

// NewUserFederation registers a new resource with the given unique name, arguments, and options.
func NewUserFederation(ctx *pulumi.Context,
	name string, args *UserFederationArgs, opts ...pulumi.ResourceOpt) (*UserFederation, error) {
	if args == nil || args.ConnectionUrl == nil {
		return nil, errors.New("missing required argument 'ConnectionUrl'")
	}
	if args == nil || args.RdnLdapAttribute == nil {
		return nil, errors.New("missing required argument 'RdnLdapAttribute'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.UserObjectClasses == nil {
		return nil, errors.New("missing required argument 'UserObjectClasses'")
	}
	if args == nil || args.UsernameLdapAttribute == nil {
		return nil, errors.New("missing required argument 'UsernameLdapAttribute'")
	}
	if args == nil || args.UsersDn == nil {
		return nil, errors.New("missing required argument 'UsersDn'")
	}
	if args == nil || args.UuidLdapAttribute == nil {
		return nil, errors.New("missing required argument 'UuidLdapAttribute'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["batchSizeForSync"] = nil
		inputs["bindCredential"] = nil
		inputs["bindDn"] = nil
		inputs["cachePolicy"] = nil
		inputs["changedSyncPeriod"] = nil
		inputs["connectionTimeout"] = nil
		inputs["connectionUrl"] = nil
		inputs["customUserSearchFilter"] = nil
		inputs["editMode"] = nil
		inputs["enabled"] = nil
		inputs["fullSyncPeriod"] = nil
		inputs["importEnabled"] = nil
		inputs["name"] = nil
		inputs["pagination"] = nil
		inputs["priority"] = nil
		inputs["rdnLdapAttribute"] = nil
		inputs["readTimeout"] = nil
		inputs["realmId"] = nil
		inputs["searchScope"] = nil
		inputs["syncRegistrations"] = nil
		inputs["useTruststoreSpi"] = nil
		inputs["userObjectClasses"] = nil
		inputs["usernameLdapAttribute"] = nil
		inputs["usersDn"] = nil
		inputs["uuidLdapAttribute"] = nil
		inputs["validatePasswordPolicy"] = nil
		inputs["vendor"] = nil
	} else {
		inputs["batchSizeForSync"] = args.BatchSizeForSync
		inputs["bindCredential"] = args.BindCredential
		inputs["bindDn"] = args.BindDn
		inputs["cachePolicy"] = args.CachePolicy
		inputs["changedSyncPeriod"] = args.ChangedSyncPeriod
		inputs["connectionTimeout"] = args.ConnectionTimeout
		inputs["connectionUrl"] = args.ConnectionUrl
		inputs["customUserSearchFilter"] = args.CustomUserSearchFilter
		inputs["editMode"] = args.EditMode
		inputs["enabled"] = args.Enabled
		inputs["fullSyncPeriod"] = args.FullSyncPeriod
		inputs["importEnabled"] = args.ImportEnabled
		inputs["name"] = args.Name
		inputs["pagination"] = args.Pagination
		inputs["priority"] = args.Priority
		inputs["rdnLdapAttribute"] = args.RdnLdapAttribute
		inputs["readTimeout"] = args.ReadTimeout
		inputs["realmId"] = args.RealmId
		inputs["searchScope"] = args.SearchScope
		inputs["syncRegistrations"] = args.SyncRegistrations
		inputs["useTruststoreSpi"] = args.UseTruststoreSpi
		inputs["userObjectClasses"] = args.UserObjectClasses
		inputs["usernameLdapAttribute"] = args.UsernameLdapAttribute
		inputs["usersDn"] = args.UsersDn
		inputs["uuidLdapAttribute"] = args.UuidLdapAttribute
		inputs["validatePasswordPolicy"] = args.ValidatePasswordPolicy
		inputs["vendor"] = args.Vendor
	}
	s, err := ctx.RegisterResource("keycloak:Ldap/userFederation:UserFederation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserFederation{s: s}, nil
}

// GetUserFederation gets an existing UserFederation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserFederation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserFederationState, opts ...pulumi.ResourceOpt) (*UserFederation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["batchSizeForSync"] = state.BatchSizeForSync
		inputs["bindCredential"] = state.BindCredential
		inputs["bindDn"] = state.BindDn
		inputs["cachePolicy"] = state.CachePolicy
		inputs["changedSyncPeriod"] = state.ChangedSyncPeriod
		inputs["connectionTimeout"] = state.ConnectionTimeout
		inputs["connectionUrl"] = state.ConnectionUrl
		inputs["customUserSearchFilter"] = state.CustomUserSearchFilter
		inputs["editMode"] = state.EditMode
		inputs["enabled"] = state.Enabled
		inputs["fullSyncPeriod"] = state.FullSyncPeriod
		inputs["importEnabled"] = state.ImportEnabled
		inputs["name"] = state.Name
		inputs["pagination"] = state.Pagination
		inputs["priority"] = state.Priority
		inputs["rdnLdapAttribute"] = state.RdnLdapAttribute
		inputs["readTimeout"] = state.ReadTimeout
		inputs["realmId"] = state.RealmId
		inputs["searchScope"] = state.SearchScope
		inputs["syncRegistrations"] = state.SyncRegistrations
		inputs["useTruststoreSpi"] = state.UseTruststoreSpi
		inputs["userObjectClasses"] = state.UserObjectClasses
		inputs["usernameLdapAttribute"] = state.UsernameLdapAttribute
		inputs["usersDn"] = state.UsersDn
		inputs["uuidLdapAttribute"] = state.UuidLdapAttribute
		inputs["validatePasswordPolicy"] = state.ValidatePasswordPolicy
		inputs["vendor"] = state.Vendor
	}
	s, err := ctx.ReadResource("keycloak:Ldap/userFederation:UserFederation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserFederation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserFederation) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserFederation) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The number of users to sync within a single transaction.
func (r *UserFederation) BatchSizeForSync() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["batchSizeForSync"])
}

// Password of LDAP admin.
func (r *UserFederation) BindCredential() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["bindCredential"])
}

// DN of LDAP admin, which will be used by Keycloak to access LDAP server.
func (r *UserFederation) BindDn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["bindDn"])
}

func (r *UserFederation) CachePolicy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cachePolicy"])
}

// How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users
// sync.
func (r *UserFederation) ChangedSyncPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["changedSyncPeriod"])
}

// LDAP connection timeout (duration string)
func (r *UserFederation) ConnectionTimeout() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["connectionTimeout"])
}

// Connection URL to the LDAP server.
func (r *UserFederation) ConnectionUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["connectionUrl"])
}

// Additional LDAP filter for filtering searched users. Must begin with '(' and end with ')'.
func (r *UserFederation) CustomUserSearchFilter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["customUserSearchFilter"])
}

// READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to LDAP.
func (r *UserFederation) EditMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["editMode"])
}

// When false, this provider will not be used when performing queries for users.
func (r *UserFederation) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
func (r *UserFederation) FullSyncPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["fullSyncPeriod"])
}

// When true, LDAP users will be imported into the Keycloak database.
func (r *UserFederation) ImportEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["importEnabled"])
}

// Display name of the provider when displayed in the console.
func (r *UserFederation) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// When true, Keycloak assumes the LDAP server supports pagination.
func (r *UserFederation) Pagination() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["pagination"])
}

// Priority of this provider when looking up users. Lower values are first.
func (r *UserFederation) Priority() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["priority"])
}

// Name of the LDAP attribute to use as the relative distinguished name.
func (r *UserFederation) RdnLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rdnLdapAttribute"])
}

// LDAP read timeout (duration string)
func (r *UserFederation) ReadTimeout() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["readTimeout"])
}

// The realm this provider will provide user federation for.
func (r *UserFederation) RealmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["realmId"])
}

// ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
func (r *UserFederation) SearchScope() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["searchScope"])
}

// When true, newly created users will be synced back to LDAP.
func (r *UserFederation) SyncRegistrations() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["syncRegistrations"])
}

func (r *UserFederation) UseTruststoreSpi() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["useTruststoreSpi"])
}

// All values of LDAP objectClass attribute for users in LDAP.
func (r *UserFederation) UserObjectClasses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["userObjectClasses"])
}

// Name of the LDAP attribute to use as the Keycloak username.
func (r *UserFederation) UsernameLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["usernameLdapAttribute"])
}

// Full DN of LDAP tree where your users are.
func (r *UserFederation) UsersDn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["usersDn"])
}

// Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
func (r *UserFederation) UuidLdapAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["uuidLdapAttribute"])
}

// When true, Keycloak will validate passwords using the realm policy before updating it.
func (r *UserFederation) ValidatePasswordPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["validatePasswordPolicy"])
}

// LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
func (r *UserFederation) Vendor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vendor"])
}

// Input properties used for looking up and filtering UserFederation resources.
type UserFederationState struct {
	// The number of users to sync within a single transaction.
	BatchSizeForSync interface{}
	// Password of LDAP admin.
	BindCredential interface{}
	// DN of LDAP admin, which will be used by Keycloak to access LDAP server.
	BindDn interface{}
	CachePolicy interface{}
	// How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed
	// users sync.
	ChangedSyncPeriod interface{}
	// LDAP connection timeout (duration string)
	ConnectionTimeout interface{}
	// Connection URL to the LDAP server.
	ConnectionUrl interface{}
	// Additional LDAP filter for filtering searched users. Must begin with '(' and end with ')'.
	CustomUserSearchFilter interface{}
	// READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to LDAP.
	EditMode interface{}
	// When false, this provider will not be used when performing queries for users.
	Enabled interface{}
	// How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
	FullSyncPeriod interface{}
	// When true, LDAP users will be imported into the Keycloak database.
	ImportEnabled interface{}
	// Display name of the provider when displayed in the console.
	Name interface{}
	// When true, Keycloak assumes the LDAP server supports pagination.
	Pagination interface{}
	// Priority of this provider when looking up users. Lower values are first.
	Priority interface{}
	// Name of the LDAP attribute to use as the relative distinguished name.
	RdnLdapAttribute interface{}
	// LDAP read timeout (duration string)
	ReadTimeout interface{}
	// The realm this provider will provide user federation for.
	RealmId interface{}
	// ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
	SearchScope interface{}
	// When true, newly created users will be synced back to LDAP.
	SyncRegistrations interface{}
	UseTruststoreSpi interface{}
	// All values of LDAP objectClass attribute for users in LDAP.
	UserObjectClasses interface{}
	// Name of the LDAP attribute to use as the Keycloak username.
	UsernameLdapAttribute interface{}
	// Full DN of LDAP tree where your users are.
	UsersDn interface{}
	// Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
	UuidLdapAttribute interface{}
	// When true, Keycloak will validate passwords using the realm policy before updating it.
	ValidatePasswordPolicy interface{}
	// LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
	Vendor interface{}
}

// The set of arguments for constructing a UserFederation resource.
type UserFederationArgs struct {
	// The number of users to sync within a single transaction.
	BatchSizeForSync interface{}
	// Password of LDAP admin.
	BindCredential interface{}
	// DN of LDAP admin, which will be used by Keycloak to access LDAP server.
	BindDn interface{}
	CachePolicy interface{}
	// How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed
	// users sync.
	ChangedSyncPeriod interface{}
	// LDAP connection timeout (duration string)
	ConnectionTimeout interface{}
	// Connection URL to the LDAP server.
	ConnectionUrl interface{}
	// Additional LDAP filter for filtering searched users. Must begin with '(' and end with ')'.
	CustomUserSearchFilter interface{}
	// READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to LDAP.
	EditMode interface{}
	// When false, this provider will not be used when performing queries for users.
	Enabled interface{}
	// How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
	FullSyncPeriod interface{}
	// When true, LDAP users will be imported into the Keycloak database.
	ImportEnabled interface{}
	// Display name of the provider when displayed in the console.
	Name interface{}
	// When true, Keycloak assumes the LDAP server supports pagination.
	Pagination interface{}
	// Priority of this provider when looking up users. Lower values are first.
	Priority interface{}
	// Name of the LDAP attribute to use as the relative distinguished name.
	RdnLdapAttribute interface{}
	// LDAP read timeout (duration string)
	ReadTimeout interface{}
	// The realm this provider will provide user federation for.
	RealmId interface{}
	// ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
	SearchScope interface{}
	// When true, newly created users will be synced back to LDAP.
	SyncRegistrations interface{}
	UseTruststoreSpi interface{}
	// All values of LDAP objectClass attribute for users in LDAP.
	UserObjectClasses interface{}
	// Name of the LDAP attribute to use as the Keycloak username.
	UsernameLdapAttribute interface{}
	// Full DN of LDAP tree where your users are.
	UsersDn interface{}
	// Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
	UuidLdapAttribute interface{}
	// When true, Keycloak will validate passwords using the realm policy before updating it.
	ValidatePasswordPolicy interface{}
	// LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
	Vendor interface{}
}
