# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables

__all__ = ['GenericClientRoleMapper']


class GenericClientRoleMapper(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_scope_id: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        ## # GenericClientRoleMapper

        Allow for creating and managing a client's scope mappings within Keycloak.

        By default, all the user role mappings of the user are added as claims within
        the token or assertion. When `full_scope_allowed` is set to `false` for a
        client, role scope mapping allows you to limit the roles that get declared
        inside an access token for a client.

        ### Example Usage (Realm Role to Client)

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        client = keycloak.openid.Client("client",
            realm_id=realm.id,
            client_id="client",
            enabled=True,
            access_type="BEARER-ONLY")
        realm_role = keycloak.Role("realmRole",
            realm_id=realm.id,
            description="My Realm Role")
        client_role_mapper = keycloak.GenericClientRoleMapper("clientRoleMapper",
            realm_id=realm.id,
            client_id=client.id,
            role_id=realm_role.id)
        ```

        ### Example Usage (Client Role to Client)

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        client_a = keycloak.openid.Client("clientA",
            realm_id=realm.id,
            client_id="client-a",
            enabled=True,
            access_type="BEARER-ONLY")
        client_role_a = keycloak.Role("clientRoleA",
            realm_id=realm.id,
            client_id=client_a.id,
            description="My Client Role")
        client_b = keycloak.openid.Client("clientB",
            realm_id=realm.id,
            client_id="client-b",
            enabled=True,
            access_type="BEARER-ONLY")
        client_role_b = keycloak.Role("clientRoleB",
            realm_id=realm.id,
            client_id=client_b.id,
            description="My Client Role")
        client_b_role_mapper = keycloak.GenericClientRoleMapper("clientBRoleMapper",
            realm_id=realm.id,
            client_id=keycloak_client["client_b"]["id"],
            role_id=client_role_a.id)
        ```

        ### Example Usage (Realm Role to Client Scope)

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        client_scope = keycloak.openid.ClientScope("clientScope", realm_id=realm.id)
        realm_role = keycloak.Role("realmRole",
            realm_id=realm.id,
            description="My Realm Role")
        client_role_mapper = keycloak.GenericClientRoleMapper("clientRoleMapper",
            realm_id=realm.id,
            client_scope_id=client_scope.id,
            role_id=realm_role.id)
        ```

        ### Example Usage (Client Role to Client Scope)

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        client = keycloak.openid.Client("client",
            realm_id=realm.id,
            client_id="client",
            enabled=True,
            access_type="BEARER-ONLY")
        client_role = keycloak.Role("clientRole",
            realm_id=realm.id,
            client_id=client.id,
            description="My Client Role")
        client_scope = keycloak.openid.ClientScope("clientScope", realm_id=realm.id)
        client_b_role_mapper = keycloak.GenericClientRoleMapper("clientBRoleMapper",
            realm_id=realm.id,
            client_scope_id=keycloak_client_scope["client_scope"]["id"],
            role_id=client_role.id)
        ```

        ### Argument Reference

        The following arugments are supported:

        - `realm_id` - (Required) The realm this role mapper exists within
        - `client_id` - (Optional) The ID of the client this role mapper is added to
        - `client_scope_id` - (Optional) The ID of the client scope this role mapper is added to
        - `role_id` - (Required) The ID of the role to be added to this role mapper

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: The destination client of the client role. Cannot be used at the same time as client_scope_id.
        :param pulumi.Input[str] client_scope_id: The destination client scope of the client role. Cannot be used at the same time as client_id.
        :param pulumi.Input[str] realm_id: The realm id where the associated client or client scope exists.
        :param pulumi.Input[str] role_id: Id of the role to assign
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['client_id'] = client_id
            __props__['client_scope_id'] = client_scope_id
            if realm_id is None:
                raise TypeError("Missing required property 'realm_id'")
            __props__['realm_id'] = realm_id
            if role_id is None:
                raise TypeError("Missing required property 'role_id'")
            __props__['role_id'] = role_id
        super(GenericClientRoleMapper, __self__).__init__(
            'keycloak:index/genericClientRoleMapper:GenericClientRoleMapper',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_scope_id: Optional[pulumi.Input[str]] = None,
            realm_id: Optional[pulumi.Input[str]] = None,
            role_id: Optional[pulumi.Input[str]] = None) -> 'GenericClientRoleMapper':
        """
        Get an existing GenericClientRoleMapper resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: The destination client of the client role. Cannot be used at the same time as client_scope_id.
        :param pulumi.Input[str] client_scope_id: The destination client scope of the client role. Cannot be used at the same time as client_id.
        :param pulumi.Input[str] realm_id: The realm id where the associated client or client scope exists.
        :param pulumi.Input[str] role_id: Id of the role to assign
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["client_id"] = client_id
        __props__["client_scope_id"] = client_scope_id
        __props__["realm_id"] = realm_id
        __props__["role_id"] = role_id
        return GenericClientRoleMapper(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[str]]:
        """
        The destination client of the client role. Cannot be used at the same time as client_scope_id.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientScopeId")
    def client_scope_id(self) -> pulumi.Output[Optional[str]]:
        """
        The destination client scope of the client role. Cannot be used at the same time as client_id.
        """
        return pulumi.get(self, "client_scope_id")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Output[str]:
        """
        The realm id where the associated client or client scope exists.
        """
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        Id of the role to assign
        """
        return pulumi.get(self, "role_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

